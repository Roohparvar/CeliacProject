!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRAV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top_names <- rownames(top_genes)
colors <- c("green", "red", "blue", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRAV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 10/CD4/TRBV/1_Healthy and ACD")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("Healthy", "ACD"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
healthy_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "Healthy"])]
acd_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
mean_healthy <- rowMeans(count_matrix[, healthy_samples, drop = FALSE])
mean_acd <- rowMeans(count_matrix[, acd_samples, drop = FALSE])
log2fc <- log2( (mean_acd + 1) / (mean_healthy + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(healthy_samples, acd_samples), drop = FALSE], 1, function(x) {
healthy_values <- as.numeric(x[healthy_samples])
acd_values <- as.numeric(x[acd_samples])
if(length(healthy_values) < 2 || length(acd_values) < 2) {
return(NA)
}
test <- t.test(healthy_values, acd_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top_names <- rownames(top_genes)
colors <- c("red", "blue", "green", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 10/CD4/TRBV/2_Healthy and RCD1")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("Healthy", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
healthy_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "Healthy"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_healthy <- rowMeans(count_matrix[, healthy_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_RCD1 + 1) / (mean_healthy + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(healthy_samples, RCD1_samples), drop = FALSE], 1, function(x) {
healthy_values <- as.numeric(x[healthy_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(healthy_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(healthy_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 3)
top_names <- rownames(top_genes)
colors <- c("green", "red", "blue", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(RCD1 versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 10/CD4/TRBV/3_ACD and RCD1")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 4)
top_names <- rownames(top_genes)
colors <- c("blue", "red","green", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 10/CD4/TRBV/2_Healthy and RCD1")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("Healthy", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
healthy_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "Healthy"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_healthy <- rowMeans(count_matrix[, healthy_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_RCD1 + 1) / (mean_healthy + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(healthy_samples, RCD1_samples), drop = FALSE], 1, function(x) {
healthy_values <- as.numeric(x[healthy_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(healthy_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(healthy_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 3)
top_names <- rownames(top_genes)
colors <- c("green", "blue", "red", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(RCD1 versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 10/CD4/TRBV/3_ACD and RCD1")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 4)
top_names <- rownames(top_genes)
colors <- c("purple", "blue", "orange", "yellow", "red")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 4)
top_names <- rownames(top_genes)
colors <- c("purple", "blue", "orange", "pink", "red")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P6_T")
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P6_T")
library(Seurat)
library(SeuratObject)
library(ggplot2)
library(scCustomize)
# Access the list of human mitochondrial Ensembl gene IDs
mt_genes <- ensembl_mito_id$Homo_sapiens_mito_ensembl
mt_genes
srobj[["MTpercent"]] <- PercentageFeatureSet(srobj, features = mt_genes)
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P6_T")
rownames(CountMatrix) <- make.unique(rownames(CountMatrix))
colnames(CountMatrix) <- make.unique(colnames(CountMatrix))
rownames(CountMatrix) <- gsub("_", "-", rownames(CountMatrix))
srobj=CreateSeuratObject(CountMatrix,project ="P6_T_Blood",min.cells=3,min.features=200)
Features(srobj)[1:100]
install.packages("scCustomize")
# Load the package
library(scCustomize)
# Access the list of human mitochondrial Ensembl gene IDs
mt_genes <- ensembl_mito_id$Homo_sapiens_mito_ensembl
install.packages("scCustomize")
srobj[["MTpercent"]] <- PercentageFeatureSet(srobj, features = mt_genes)
# Check the summary statistics
summary(srobj[["percent.mt"]])
srobj[["MTpercent"]] <- PercentageFeatureSet(srobj, features = mt_genes)
summary(srobj[["percent.mt"]])
library(Seurat)
library(SeuratObject)
library(ggplot2)
summary(srobj[["percent.mt"]])
summary(srobj[["MTpercent"]])
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P6_T")
srobj=CreateSeuratObject(CountMatrix,project ="P6_T_Blood",min.cells=3,min.features=200)
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P6_T")
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P1_TN")
srobj=CreateSeuratObject(CountMatrix,project ="P1_TN_Blood",min.cells=3,min.features=200)
head(row.names(srobj))
head(colnames(srobj))
srobj=CreateSeuratObject(CountMatrix,project ="P1_TN_Blood",min.cells=3,min.features=200)
colnames(CountMatrix) <- make.unique(colnames(CountMatrix))
srobj=CreateSeuratObject(CountMatrix,project ="P1_TN_Blood",min.cells=3,min.features=200)
CountMatrix=Read10X("C:/Esmaeil/irAEsProject/Backup/Part4/P1_TN")
View(CountMatrix)
head(CountMatrix)
head(CountMatrix)[1:3,1:3]
srobj=CreateSeuratObject(CountMatrix,project ="P1_TN_Blood",min.cells=3,min.features=200)
View(CountMatrix)
length(unique(colnames(CountMatrix)))
length(unique(rownames(CountMatrix)))
duplicated(colnames(CountMatrix))
colnames(CountMatrix)[duplicated(colnames(CountMatrix))]
test <- CountMatrix[, duplicated(colnames(CountMatrix))]
View(test)
View(test)
test <- CountMatrix[, colnames(CountMatrix) == "TACAGTGAGTCATGCT.1"]
View(test)
test
