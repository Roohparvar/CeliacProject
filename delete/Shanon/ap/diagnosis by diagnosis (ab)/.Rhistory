# 330 cells were re-annotated as ab
#gd
full_metadata$imm_receptor_Esmaeil[full_metadata$CellID %in% gd_subkeys] <- "gd"
full_metadata$TRAV[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$TRAJ[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$a_cdr3[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$TRBV[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$TRBJ[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$b_cdr3[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$cdr_Full_ab[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$clone_size_ab[full_metadata$CellID %in% gd_subkeys] <- ""
full_metadata$clone_size_bucket_ab[full_metadata$CellID %in% gd_subkeys] <- ""
# 92 cells were re-annotated as gd
#--------------------------------------------------------------------------------- Part 1 - Step 8: Computing Clone Size for ab and gd TCRs
# Calculated clone_size_ab and clone_size_bucket_ab based on the frequency of each cdr_Full_ab sequence.
clone_sizes <- table(full_metadata$cdr_Full_ab)
full_metadata$clone_size_ab <- clone_sizes[full_metadata$cdr_Full_ab]
full_metadata$clone_size_bucket_ab <- ifelse(
is.na(full_metadata$clone_size_ab),
NA,
ifelse(
full_metadata$clone_size_ab == 1,
"Singleton",
ifelse(
full_metadata$clone_size_ab >= 2 & full_metadata$clone_size_ab < 10,
"Small clone (2+)",
"Large clone (10+)"
)
)
)
# Calculated clone_size_gd and clone_size_bucket_gd based on the frequency of each cdr_Full_gd sequence.
clone_sizes <- table(full_metadata$cdr_Full_gd)
full_metadata$clone_size_gd <- clone_sizes[full_metadata$cdr_Full_gd]
full_metadata$clone_size_bucket_gd <- ifelse(
is.na(full_metadata$clone_size_gd),
NA,
ifelse(
full_metadata$clone_size_gd == 1,
"Singleton",
ifelse(
full_metadata$clone_size_gd >= 2 & full_metadata$clone_size_gd < 10,
"Small clone (2+)",
"Large clone (10+)"
)
)
)
#--------------------------------------- Part 1 - Step 9 - Section 1: Plot UMAP colored by cluster
full_metadata$cluster <- recode(full_metadata$cluster,
"Tgd INSIG1+" = "Tγδ INSIG1+",
"NK/Tgd" = "NK/Tγδ",
"Act. Tgd" = "Act. Tγδ",
"Tgd CD8+" = "Tγδ CD8+"
)
plot_data <- full_metadata %>%
filter(!is.na(cluster))
cluster_centers <- plot_data %>%
group_by(cluster) %>%
summarize(x = mean(scVI_with_hvg_UMAP_1),
y = mean(scVI_with_hvg_UMAP_2))
umap_plot <- ggplot(plot_data, aes(x = scVI_with_hvg_UMAP_1,
y = scVI_with_hvg_UMAP_2,
color = factor(cluster))) +
geom_point(size = 0.6, alpha = 0.8) +
geom_text(data = cluster_centers, aes(x = x, y = y, label = cluster),
color = "black", size = 3, hjust = 0.5, vjust = 0.5) +
labs(title = "Distributions of Cells Colored by Cluster",
x = "UMAP 1",
y = "UMAP 2",
color = "Cluster") +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA))
ggsave("UMAP.png", plot = umap_plot, width = 8, height = 6, dpi = 600, bg = "white")
ggsave("UMAP.pdf", plot = umap_plot, width = 8, height = 6, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
#--------------------------------------- Part 1 - Step 9 - Section 2: We identified the distribution of immune receptors across all clusters.
summary_table <- full_metadata %>%
group_by(cluster) %>%
summarise(
total_cells = n(),  # new column for total number of cells in the cluster
ab = sum(imm_receptor_Esmaeil == "ab", na.rm = TRUE),
Aberrant_ab = sum(imm_receptor_Esmaeil == "Aberrant ab", na.rm = TRUE),
gd = sum(imm_receptor_Esmaeil == "gd", na.rm = TRUE),
Aberrant_g = sum(imm_receptor_Esmaeil == "Aberrant g", na.rm = TRUE),
only_a = sum(!is.na(a_cdr3) & is.na(b_cdr3) & is.na(g_cdr3) & is.na(d_cdr3)),
only_b = sum(is.na(a_cdr3) & !is.na(b_cdr3) & is.na(g_cdr3) & is.na(d_cdr3)),
only_g = sum(is.na(a_cdr3) & is.na(b_cdr3) & !is.na(g_cdr3) & is.na(d_cdr3)),
only_d = sum(is.na(a_cdr3) & is.na(b_cdr3) & is.na(g_cdr3) & !is.na(d_cdr3)),
only_a_b = sum(!is.na(a_cdr3) & !is.na(b_cdr3) & is.na(g_cdr3) & is.na(d_cdr3)),
only_a_g = sum(!is.na(a_cdr3) & is.na(b_cdr3) & !is.na(g_cdr3) & is.na(d_cdr3)),
only_a_d = sum(!is.na(a_cdr3) & is.na(b_cdr3) & is.na(g_cdr3) & !is.na(d_cdr3)),
only_b_g = sum(is.na(a_cdr3) & !is.na(b_cdr3) & !is.na(g_cdr3) & is.na(d_cdr3)),
only_b_d = sum(is.na(a_cdr3) & !is.na(b_cdr3) & is.na(g_cdr3) & !is.na(d_cdr3)),
only_g_d = sum(is.na(a_cdr3) & is.na(b_cdr3) & !is.na(g_cdr3) & !is.na(d_cdr3)),
only_a_b_g = sum(!is.na(a_cdr3) & !is.na(b_cdr3) & !is.na(g_cdr3) & is.na(d_cdr3)),
only_a_b_d = sum(!is.na(a_cdr3) & !is.na(b_cdr3) & is.na(g_cdr3) & !is.na(d_cdr3)),
only_a_g_d = sum(!is.na(a_cdr3) & is.na(b_cdr3) & !is.na(g_cdr3) & !is.na(d_cdr3)),
only_b_g_d = sum(is.na(a_cdr3) & !is.na(b_cdr3) & !is.na(g_cdr3) & !is.na(d_cdr3)),
all_present = sum(!is.na(a_cdr3) & !is.na(b_cdr3) & !is.na(g_cdr3) & !is.na(d_cdr3)),
all_a_b_g_d_NA = sum(is.na(a_cdr3) & is.na(b_cdr3) & is.na(g_cdr3) & is.na(d_cdr3))
)
# Save to Excel
write.xlsx(summary_table, "distribution of immune receptors.xlsx")
#--------------------------------------------------------------------------------- Save MetaData
full_metadata[full_metadata == ""] <- NA
full_metadata$imm_receptor_Esmaeil <- recode(full_metadata$imm_receptor_Esmaeil,
"Aberrant ab" = "Aberrant αβ",
"Aberrant g" = "Aberrant γ",
"ab" = "αβ",
"gd" = "γδ"
)
save(full_metadata, patient_colours, diagnosis_colours, palette_34, file = "Final MetaData.Rdata")
unique(full_metadata$cluster)
unique(full_metadata$imm_receptor_Esmaeil)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/Shanon/ap/diagnosis by diagnosis (ab)")
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
load("C:/Esmaeil/CeliacProject/Data/Meta Data/2_MetaData_Esmaeil.Rdata")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/Shanon/ap/diagnosis by diagnosis (ab)")
library(dplyr)
library(ggplot2)
library(vegan)
# انتخاب کلاسترهای هدف برای حذف (اختیاری)
# انتخاب کلاسترهای هدف (اگر میخوای حذفشون کنی)
target_clusters <- c(
"Plasma cells_1", "B cells_1", "B cells_2",
"B cells MZB1+", "Plasma cells_2", "Plasmablast",
"B cells BAFFR", "Tgd INSIG1+", "Tgd", "Tgd CD8+", "ILC2/ILC3", "ILC2/ILTi", "ILC1", "DC", "Macrophages", "Mast cells"
)
full_metadata <- full_metadata %>%
filter(!cluster %in% target_clusters)
# ترتیب مرجع برای نمودار
ordered_celltypes_bycelltype <- c(
"CD4-CD8-", "Cyt. IEL", "Trm IEL",
"IEL CCL4+", "nIEL", "Prolif. IEL", "IEL GZMK+", "CD8 Cyt.",
"CD4-CD8- IL10 ICOS",
"CD8 Mem", "CD8 Trm",
"Th", "Tregs", "Th1 Mem", "Th2/Tfh", "Th17",
"NK Tgd", "Tgd CD8+", "Tgd", "Tgd INSIG1+",
"ILC1", "ILC2/ILC3", "ILC2/ILTi",
"B cells MZB1+", "B cells BAFFR", "B cells_1", "B cells_2",
"Plasmablast", "Plasma cells_1", "Plasma cells_2",
"Macrophages", "DC", "Mast cells"
)
ordered_clusters <- ordered_celltypes_bycelltype[
ordered_celltypes_bycelltype %in% unique(full_metadata$cluster)
]
# محاسبه شاخص‌ها بر اساس Diagnosis و Cluster
cluster_Diagnosis_diversity <- full_metadata %>%
filter(!is.na(cdr_Full_ab)) %>%
group_by(Diagnosis, cluster, cdr_Full_ab) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(Diagnosis, cluster) %>%
summarise(
shannon  = diversity(count, index = "shannon"),
simpson  = diversity(count, index = "simpson"),
richness = specnumber(count),
.groups = "drop"
) %>%
mutate(
shannon_norm = shannon / log(richness),
cluster = factor(cluster, levels = ordered_clusters)
)
# تم گرافیکی
custom_theme <- theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1)
)
# حلقه برای رسم و ذخیره نمودار هر بیمار
Diagnosiss <- unique(cluster_Diagnosis_diversity$Diagnosis)
# for (p in Diagnosiss) {
#   df_Diagnosis <- cluster_Diagnosis_diversity %>% filter(Diagnosis == p)
#
#   # نمودار شانون خام
#   p1 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon)) +
#     geom_bar(stat = "identity", fill = "steelblue") +
#     labs(title = paste("Shannon Diversity - Diagnosis", p),
#          x = "Cluster", y = "Shannon Index") +
#     custom_theme
#
#   # نمودار شانون نرمالایز شده
#   p2 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon_norm)) +
#     geom_bar(stat = "identity", fill = "darkgreen") +
#     labs(title = paste("Normalized Shannon Diversity - Diagnosis", p),
#          x = "Cluster", y = "Normalized Shannon Index") +
#     custom_theme
#
#   # ذخیره نمودارها
#   ggsave(paste0("shannon_diversity_Diagnosis_", p, ".png"), plot = p1, width = 10, height = 5, dpi = 300, bg = "white")
#   ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".png"), plot = p2, width = 10, height = 5, dpi = 300, bg = "white")
#
#   # ذخیره نمودارها (PDF)
#   ggsave(paste0("shannon_diversity_Diagnosis_", p, ".pdf"),
#          plot = p1, width = 10, height = 5, dpi = 300, bg = "white")
#   ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".pdf"),
#          plot = p2, width = 10, height = 5, dpi = 300, bg = "white")
# }
# Define color mapping for each diagnosis
diagnosis_colors <- c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"   = "#D0632B",
"RCD-II"  = "#6E71AD"
)
for (p in Diagnosiss) {
df_Diagnosis <- cluster_Diagnosis_diversity %>% filter(Diagnosis == p)
# انتخاب رنگ بر اساس تشخیص
fill_color <- diagnosis_colors[p]
# نمودار شانون خام
p1 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon)) +
geom_bar(stat = "identity", fill = fill_color) +
labs(title = paste("Shannon Diversity - Diagnosis", p),
x = "Cluster", y = "Shannon Index") +
custom_theme
# نمودار شانون نرمالایز شده
p2 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon_norm)) +
geom_bar(stat = "identity", fill = fill_color) +
labs(title = paste("Normalized Shannon Diversity - Diagnosis", p),
x = "Cluster", y = "Normalized Shannon Index") +
custom_theme
# ذخیره نمودارها (PNG)
ggsave(paste0("shannon_diversity_Diagnosis_", p, ".png"), plot = p1,
width = 10, height = 5, dpi = 300, bg = "white")
ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".png"), plot = p2,
width = 10, height = 5, dpi = 300, bg = "white")
# ذخیره نمودارها (PDF)
ggsave(paste0("shannon_diversity_Diagnosis_", p, ".pdf"), plot = p1,
width = 10, height = 5, dpi = 300, bg = "white")
ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".pdf"), plot = p2,
width = 10, height = 5, dpi = 300, bg = "white")
}
# Combined stacked plot for normalized Shannon by Cluster and Diagnosis
p_combined <- ggplot(cluster_Diagnosis_diversity,
aes(x = cluster, y = shannon_norm, fill = Diagnosis)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"    = "#D0632B",
"RCD-II"    = "#6E71AD"
)) +
labs(title = "Normalized Shannon Diversity by Cluster and Diagnosis",
x = "Cluster", y = "Normalized Shannon Index", fill = "Diagnosis") +
custom_theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save stacked plot
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_stacked.png",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_stacked.pdf",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
library(dplyr)
library(ggplot2)
# Define the order of diagnoses
diag_order <- c("RCD-II", "RCD-I", "ACD", "Healthy")
# Create a start position for each diagnosis within each cluster
cluster_Diagnosis_diversity <- cluster_Diagnosis_diversity %>%
mutate(Diagnosis = factor(Diagnosis, levels = diag_order)) %>%
group_by(cluster) %>%
arrange(Diagnosis) %>%
mutate(
y_start = as.numeric(Diagnosis) - 1,          # integer start positions: 0,1,2,3
y_end   = y_start + shannon_norm              # extend by normalized Shannon
)
# Plot bars manually using geom_rect
p_combined <- ggplot(cluster_Diagnosis_diversity, aes(x = cluster, fill = Diagnosis)) +
geom_rect(aes(xmin = as.numeric(cluster) - 0.4,
xmax = as.numeric(cluster) + 0.4,
ymin = y_start,
ymax = y_end)) +
scale_fill_manual(values = c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"    = "#D0632B",
"RCD-II"    = "#6E71AD"
)) +
labs(title = "Normalized Shannon Diversity by Cluster and Diagnosis",
x = "Cluster", y = "Normalized Shannon Index", fill = "Diagnosis") +
custom_theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save plots
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_fixed.png",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_fixed.pdf",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
library(ggplot2)
# Ensure Diagnosis is a factor with the order you want
cluster_Diagnosis_diversity$Diagnosis <- factor(cluster_Diagnosis_diversity$Diagnosis,
levels = c("RCD-II", "RCD-I", "ACD", "Healthy"))
# Point plot
p_points <- ggplot(cluster_Diagnosis_diversity,
aes(x = cluster, y = shannon_norm, color = Diagnosis)) +
geom_point(size = 2, position = position_dodge(width = 0.3)) +  # dodge to separate points
scale_color_manual(values = c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"   = "#D0632B",
"RCD-II"  = "#6E71AD"
)) +
scale_y_continuous(limits = c(0, 1)) +
labs(title = "Normalized Shannon Entropy by Cluster and Diagnosis",
x = "Cluster", y = "Normalized Shannon Index", color = "Diagnosis") +
custom_theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save plots
ggsave("shannon_norm_pointplot.png", plot = p_points, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("shannon_norm_pointplot.pdf", plot = p_points, width = 10, height = 6, dpi = 300, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/Shanon/ap/diagnosis by diagnosis (ab)")
library(dplyr)
library(ggplot2)
library(vegan)
# انتخاب کلاسترهای هدف برای حذف (اختیاری)
# انتخاب کلاسترهای هدف (اگر میخوای حذفشون کنی)
target_clusters <- c(
"Plasma cells_1", "B cells_1", "B cells_2",
"B cells MZB1+", "Plasma cells_2", "Plasmablast",
"B cells BAFFR", "Tgd INSIG1+", "Tgd", "Tgd CD8+", "NK Tgd",
"ILC2/ILC3", "ILC2/ILTi", "ILC1",
"DC", "Macrophages", "Mast cells",
)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/Shanon/ap/diagnosis by diagnosis (ab)")
library(dplyr)
library(ggplot2)
library(vegan)
# انتخاب کلاسترهای هدف برای حذف (اختیاری)
# انتخاب کلاسترهای هدف (اگر میخوای حذفشون کنی)
target_clusters <- c(
"Plasma cells_1", "B cells_1", "B cells_2",
"B cells MZB1+", "Plasma cells_2", "Plasmablast",
"B cells BAFFR", "Tgd INSIG1+", "Tgd", "Tgd CD8+", "NK Tgd",
"ILC2/ILC3", "ILC2/ILTi", "ILC1",
"DC", "Macrophages", "Mast cells"
)
full_metadata <- full_metadata %>%
filter(!cluster %in% target_clusters)
# ترتیب مرجع برای نمودار
ordered_celltypes_bycelltype <- c(
"CD4-CD8-", "Cyt. IEL", "Trm IEL",
"IEL CCL4+", "nIEL", "Prolif. IEL", "IEL GZMK+", "CD8 Cyt.",
"CD4-CD8- IL10 ICOS",
"CD8 Mem", "CD8 Trm",
"Th", "Tregs", "Th1 Mem", "Th2/Tfh", "Th17",
"NK Tgd", "Tgd CD8+", "Tgd", "Tgd INSIG1+",
"ILC1", "ILC2/ILC3", "ILC2/ILTi",
"B cells MZB1+", "B cells BAFFR", "B cells_1", "B cells_2",
"Plasmablast", "Plasma cells_1", "Plasma cells_2",
"Macrophages", "DC", "Mast cells"
)
ordered_clusters <- ordered_celltypes_bycelltype[
ordered_celltypes_bycelltype %in% unique(full_metadata$cluster)
]
# محاسبه شاخص‌ها بر اساس Diagnosis و Cluster
cluster_Diagnosis_diversity <- full_metadata %>%
filter(!is.na(cdr_Full_ab)) %>%
group_by(Diagnosis, cluster, cdr_Full_ab) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(Diagnosis, cluster) %>%
summarise(
shannon  = diversity(count, index = "shannon"),
simpson  = diversity(count, index = "simpson"),
richness = specnumber(count),
.groups = "drop"
) %>%
mutate(
shannon_norm = shannon / log(richness),
cluster = factor(cluster, levels = ordered_clusters)
)
# تم گرافیکی
custom_theme <- theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1)
)
# حلقه برای رسم و ذخیره نمودار هر بیمار
Diagnosiss <- unique(cluster_Diagnosis_diversity$Diagnosis)
# for (p in Diagnosiss) {
#   df_Diagnosis <- cluster_Diagnosis_diversity %>% filter(Diagnosis == p)
#
#   # نمودار شانون خام
#   p1 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon)) +
#     geom_bar(stat = "identity", fill = "steelblue") +
#     labs(title = paste("Shannon Diversity - Diagnosis", p),
#          x = "Cluster", y = "Shannon Index") +
#     custom_theme
#
#   # نمودار شانون نرمالایز شده
#   p2 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon_norm)) +
#     geom_bar(stat = "identity", fill = "darkgreen") +
#     labs(title = paste("Normalized Shannon Diversity - Diagnosis", p),
#          x = "Cluster", y = "Normalized Shannon Index") +
#     custom_theme
#
#   # ذخیره نمودارها
#   ggsave(paste0("shannon_diversity_Diagnosis_", p, ".png"), plot = p1, width = 10, height = 5, dpi = 300, bg = "white")
#   ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".png"), plot = p2, width = 10, height = 5, dpi = 300, bg = "white")
#
#   # ذخیره نمودارها (PDF)
#   ggsave(paste0("shannon_diversity_Diagnosis_", p, ".pdf"),
#          plot = p1, width = 10, height = 5, dpi = 300, bg = "white")
#   ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".pdf"),
#          plot = p2, width = 10, height = 5, dpi = 300, bg = "white")
# }
# Define color mapping for each diagnosis
diagnosis_colors <- c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"   = "#D0632B",
"RCD-II"  = "#6E71AD"
)
for (p in Diagnosiss) {
df_Diagnosis <- cluster_Diagnosis_diversity %>% filter(Diagnosis == p)
# انتخاب رنگ بر اساس تشخیص
fill_color <- diagnosis_colors[p]
# نمودار شانون خام
p1 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon)) +
geom_bar(stat = "identity", fill = fill_color) +
labs(title = paste("Shannon Diversity - Diagnosis", p),
x = "Cluster", y = "Shannon Index") +
custom_theme
# نمودار شانون نرمالایز شده
p2 <- ggplot(df_Diagnosis, aes(x = cluster, y = shannon_norm)) +
geom_bar(stat = "identity", fill = fill_color) +
labs(title = paste("Normalized Shannon Diversity - Diagnosis", p),
x = "Cluster", y = "Normalized Shannon Index") +
custom_theme
# ذخیره نمودارها (PNG)
ggsave(paste0("shannon_diversity_Diagnosis_", p, ".png"), plot = p1,
width = 10, height = 5, dpi = 300, bg = "white")
ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".png"), plot = p2,
width = 10, height = 5, dpi = 300, bg = "white")
# ذخیره نمودارها (PDF)
ggsave(paste0("shannon_diversity_Diagnosis_", p, ".pdf"), plot = p1,
width = 10, height = 5, dpi = 300, bg = "white")
ggsave(paste0("shannon_norm_diversity_Diagnosis_", p, ".pdf"), plot = p2,
width = 10, height = 5, dpi = 300, bg = "white")
}
# Combined stacked plot for normalized Shannon by Cluster and Diagnosis
p_combined <- ggplot(cluster_Diagnosis_diversity,
aes(x = cluster, y = shannon_norm, fill = Diagnosis)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"    = "#D0632B",
"RCD-II"    = "#6E71AD"
)) +
labs(title = "Normalized Shannon Diversity by Cluster and Diagnosis",
x = "Cluster", y = "Normalized Shannon Index", fill = "Diagnosis") +
custom_theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save stacked plot
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_stacked.png",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_stacked.pdf",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
library(dplyr)
library(ggplot2)
# Define the order of diagnoses
diag_order <- c("RCD-II", "RCD-I", "ACD", "Healthy")
# Create a start position for each diagnosis within each cluster
cluster_Diagnosis_diversity <- cluster_Diagnosis_diversity %>%
mutate(Diagnosis = factor(Diagnosis, levels = diag_order)) %>%
group_by(cluster) %>%
arrange(Diagnosis) %>%
mutate(
y_start = as.numeric(Diagnosis) - 1,          # integer start positions: 0,1,2,3
y_end   = y_start + shannon_norm              # extend by normalized Shannon
)
# Plot bars manually using geom_rect
p_combined <- ggplot(cluster_Diagnosis_diversity, aes(x = cluster, fill = Diagnosis)) +
geom_rect(aes(xmin = as.numeric(cluster) - 0.4,
xmax = as.numeric(cluster) + 0.4,
ymin = y_start,
ymax = y_end)) +
scale_fill_manual(values = c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"    = "#D0632B",
"RCD-II"    = "#6E71AD"
)) +
labs(title = "Normalized Shannon Diversity by Cluster and Diagnosis",
x = "Cluster", y = "Normalized Shannon Index", fill = "Diagnosis") +
custom_theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save plots
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_fixed.png",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
ggsave("shannon_norm_diversity_by_cluster_and_diagnosis_fixed.pdf",
plot = p_combined, width = 12, height = 6, dpi = 300, bg = "white")
library(ggplot2)
# Ensure Diagnosis is a factor with the order you want
cluster_Diagnosis_diversity$Diagnosis <- factor(cluster_Diagnosis_diversity$Diagnosis,
levels = c("RCD-II", "RCD-I", "ACD", "Healthy"))
# Point plot
p_points <- ggplot(cluster_Diagnosis_diversity,
aes(x = cluster, y = shannon_norm, color = Diagnosis)) +
geom_point(size = 2, position = position_dodge(width = 0.3)) +  # dodge to separate points
scale_color_manual(values = c(
"Healthy" = "#D83A8A",
"ACD"     = "#349C7C",
"RCD-I"   = "#D0632B",
"RCD-II"  = "#6E71AD"
)) +
scale_y_continuous(limits = c(0, 1)) +
labs(title = "Normalized Shannon Entropy by Cluster and Diagnosis",
x = "Cluster", y = "Normalized Shannon Index", color = "Diagnosis") +
custom_theme +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save plots
ggsave("shannon_norm_pointplot.png", plot = p_points, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("shannon_norm_pointplot.pdf", plot = p_points, width = 10, height = 6, dpi = 300, bg = "white")
