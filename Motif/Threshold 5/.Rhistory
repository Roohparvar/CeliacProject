#vertex.label = V(g_sub)$name,
vertex.label.cex = 0.5,
vertex.label = NA,
vertex.frame.color = "gray",
edge.color = "gray70",
layout = layout_with_fr)
dev.off()
View(topEigenvector_nodes)
length(full_metadata$cluster == "CD$-CD8-")
length(full_metadata$cluster)
length(unique(full_metadata$cluster == "CD4-CD8-"))
ab = full_metadata[full_metadata$cluster == "CD4-Cd8-", ]
ab = full_metadata[full_metadata$cluster == "CD4-CD8-", ]
length(unique(ab$cluster))
View(ab)
length(unique(ab$cdr_Full_ab))
topEigenvector_nodes <- topEigenvector_nodes %>%
left_join(full_metadata %>%
select(cdr_Full_ab, imm_receptor_Esmaeil, clone_size_ab),
by = c("Node" = "cdr_Full_ab")) %>%
group_by(Node, Eigenvector_Centrality, Cluster) %>%
summarise(
Imm_Receptor = paste(unique(imm_receptor_Esmaeil), collapse = ","),
Clone_Size   = paste(unique(clone_size_ab), collapse = ","),
.groups = "drop"
)
degree_matrix <- readRDS("C:/Esmaeil/CeliacProject/BackUp/Motif Network/threshold 5/3/degree_matrix.rds")
View(degree_matrix)
degree_counts <- degree_matrix %>% count(Degree, name = "Frequency")
library(stringdist)
library(dplyr)
library(ggplot2)
library(igraph)
degree_counts <- degree_matrix %>% count(Degree, name = "Frequency")
View(degree_counts)
degree_filtered <- subset(degree_counts, Degree < 100)
View(degree_filtered)
View(degree_matrix)
degree_matrix <- degree_matrix[order(-degree_matrix$Degree), ]
top <- degree_matrix[1:100, ]
clusters <- unlist(strsplit(top$Cluster, split = ","))
cluster_counts <- table(trimws(clusters))
df <- as.data.frame(cluster_counts)
colnames(df) <- c("Cluster", "Count")
png("Clusters Associated with Network Hubs.png", width = 5000, height = 3000, res = 600)
ggplot(df, aes(x = Cluster, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Cluster Distribution of Top CDRs by Degree",
x = "Cluster",
y = "Count") +
theme(
plot.title = element_text(hjust = 0.5, size = 8),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5, angle = 45),
axis.text.y = element_text(size = 5)
)
dev.off()
g <- graph_from_adjacency_matrix(binary_matrix, mode = "undirected", diag = FALSE)
binary_matrix <- readRDS("C:/Esmaeil/CeliacProject/BackUp/Motif Network/threshold 5/2/binary_matrix.rds")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
g <- graph_from_adjacency_matrix(binary_matrix, mode = "undirected", diag = FALSE)
eig_centrality <- eigen_centrality(g)$vector
Eigenvector <- data.frame(
Node = V(g)$name,
Eigenvector_Centrality = eig_centrality
)
cluster_map <- full_metadata %>%
group_by(cdr_Full_ab) %>%
summarise(Cluster = paste(unique(cluster), collapse = ","), .groups = "drop")
Eigenvector <- Eigenvector %>%
left_join(cluster_map, by = c("Node" = "cdr_Full_ab"))
Eigenvector <- Eigenvector %>%
arrange(desc(Eigenvector_Centrality))
topEigenvector <- ceiling(0.01 * nrow(Eigenvector))
topEigenvector_nodes <- Eigenvector[1:topEigenvector, ]
# imm_receptor + clone_size
topEigenvector_nodes <- topEigenvector_nodes %>%
left_join(full_metadata %>%
select(cdr_Full_ab, imm_receptor_Esmaeil, clone_size_ab),
by = c("Node" = "cdr_Full_ab")) %>%
group_by(Node, Eigenvector_Centrality, Cluster) %>%
summarise(
Imm_Receptor = paste(unique(imm_receptor_Esmaeil), collapse = ","),
Clone_Size   = paste(unique(clone_size_ab), collapse = ","),
.groups = "drop"
)
topEigenvector_nodes <- topEigenvector_nodes %>%
arrange(desc(Eigenvector_Centrality))
View(topEigenvector_nodes)
library(Biostrings)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/Motif/Threshold 5")
seqs <- readAAStringSet("topEigenvector_nodes.txt")
patterns <- oligonucleotideFrequency(seqs, width=5)
seqs <- readAAStringSet("topEigenvector_nodes.txt")
View(seqs)
patterns <- oligonucleotideFrequency(seqs, width=5)
patterns <- oligopeptideFrequency(seqs, width=5)
# Make 5-mer dictionary for amino acids
dict <- oligopeptides(5, letters = AA_STANDARD)  # creates all possible 5-mers
library(Biostrings)
seqs <- readAAStringSet("topEigenvector_nodes.txt")
dict <- oligopeptides(5, letters = AA_STANDARD)  # creates all possible 5-mers
get_kmers <- function(seq, k=5) {
s <- as.character(seq)
n <- nchar(s)
if (n < k) return(NULL)
kmers <- substring(s, 1:(n-k+1), k:(n))
return(kmers)
}
# Apply to all sequences
all_kmers <- unlist(lapply(seqs, get_kmers, k=5))
# Count frequencies of observed 5-mers
patterns <- table(all_kmers)
head(sort(patterns, decreasing=TRUE), 10)
dict <- oligopeptides(15, letters = AA_STANDARD)  # creates all possible 5-mers
# Function to get all k-mers in a single sequence
get_kmers <- function(seq, k=15) {
s <- as.character(seq)
n <- nchar(s)
if (n < k) return(NULL)
kmers <- substring(s, 1:(n-k+1), k:(n))
return(kmers)
}
# Apply to all sequences
all_kmers <- unlist(lapply(seqs, get_kmers, k=15))
# Count frequencies of observed 5-mers
patterns <- table(all_kmers)
head(sort(patterns, decreasing=TRUE), 10)
seqs <- readAAStringSet("Motifinput.txt")
# Function to get all k-mers in a single sequence
get_kmers <- function(seq, k=15) {
s <- as.character(seq)
n <- nchar(s)
if (n < k) return(NULL)
kmers <- substring(s, 1:(n-k+1), k:(n))
return(kmers)
}
# Apply to all sequences
all_kmers <- unlist(lapply(seqs, get_kmers, k=15))
# Count frequencies of observed 5-mers
patterns <- table(all_kmers)
head(sort(patterns, decreasing=TRUE), 10)
top_kmers <- names(sort(patterns, decreasing = TRUE))[1:20]
top_seqs <- AAStringSet(top_kmers)
ggseqlogo(top_seqs, method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
library(ggseqlogo)
install.packages(ggseqlogo)
install.packages("ggseqlogo")
ggseqlogo(top_seqs, method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
devtools::install_github("omarwagih/ggseqlogo")
ggseqlogo(top_seqs, method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
library(ggseqlogo)
ggseqlogo(top_seqs, method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
ggseqlogo(top_seqs_char, seq_type = "aa", method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
top_seqs_char <- as.character(top_kmers)
ggseqlogo(top_seqs_char, seq_type = "aa", method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
top_kmers <- names(sort(patterns, decreasing = TRUE))[1:6]
top_seqs_char <- as.character(top_kmers)
ggseqlogo(top_seqs_char, seq_type = "aa", method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
seqs <- readAAStringSet("Motifinput.txt")
seqs <- readAAStringSet("Motifinput.txt")
top_seqs_char <- as.character(seqs)
ggseqlogo(top_seqs_char, seq_type = "aa", method = "prob") +
ggtitle("Top 15-mer Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
seqs <- readAAStringSet("Motifinput.txt")
# Convert all sequences to character vector
all_seqs_char <- as.character(seqs)
# Plot logo for all sequences
ggseqlogo(all_seqs_char, seq_type = "aa", method = "prob") +
ggtitle("Protein Motifs Logo") +
theme(axis.text.x = element_text(angle=90, hjust=1))
seqs <- readAAStringSet("Motifinput.txt")
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
min_len <- min(width(seqs))
seqs_trimmed <- subseq(seqs, start=1, width=min_len)
seqs_char <- as.character(seqs_trimmed)
# Draw sequence logo
ggseqlogo(seqs_char, method = "prob") +
ggtitle("Sequence Logo of Motifinput.txt")
if (!requireNamespace("msa", quietly = TRUE)) BiocManager::install("msa")
alignment <- msa(seqs, method = "ClustalW")  # you can also use "Muscle" or "ClustalOmega"
library(msa)
alignment <- msa(seqs, method = "ClustalW")  # you can also use "Muscle" or "ClustalOmega"
View(alignment)
aligned_seqs <- as.character(unmasked(alignment))
ggseqlogo(seqs_char, method = "prob") +
ggtitle("Sequence Logo of Motifinput.txt")
head(topEigenvector_nodes)
View(full_metadata)
topEigenvector_nodes <- topEigenvector_nodes %>%
separate(Node, into = c("a_cdr3", "b_cdr3"), sep = "\\+", remove = FALSE)
library(tidyr)
topEigenvector_nodes <- topEigenvector_nodes %>%
separate(Node, into = c("a_cdr3", "b_cdr3"), sep = "\\+", remove = FALSE)
seqs <- topEigenvector_nodes$Node
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
seqs <- topEigenvector_nodes$a_cdr3
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
# Draw sequence logo
ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes")
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("a_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300)  # 300 dpi for high quality
# Save as high-quality PNG
ggsave("a_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white"")  # 300 dpi for high quality
ggsave("a_cdr3_sequence_logo.png", plot = p,
ggsave("a_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
seqs <- topEigenvector_nodes$b_cdr3
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of b_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("b_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
View(seqs)
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("a_unique_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
length(seq)
unique(topEigenvector_nodes$a_cdr3)
length(topEigenvector_nodes$a_cdr3)
length(topEigenvector_nodes$b_cdr3)
length(unique(topEigenvector_nodes$a_cdr3))
length(unique(topEigenvector_nodes$b_cdr3))
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("a_unique_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of b_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("b_unique_cdr3_sequence_logo.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3α.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# beta
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of b_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave(" Logo plots of the CDR3β.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3α.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# beta
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of b_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave(" Logo plots of the CDR3β.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of a_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3α.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# beta
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Sequence Logo of b_cdr3 from topEigenvector_nodes") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave(" Logo plots of the CDR3β.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Logo plots of the CDR3α") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3α.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# beta
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Logo plots of the CDR3β") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3β.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Logo plots of the CDR3α") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3α.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# beta
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Logo plots of the CDR3β") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3β.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
View(topEigenvector_nodes)
View(topEigenvector_nodes)
saveRDS(topEigenvector_nodes, file = "topEigenvector_nodes.rds")
