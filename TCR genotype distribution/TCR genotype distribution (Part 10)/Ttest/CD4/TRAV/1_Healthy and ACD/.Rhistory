# 5. Create clone_size_gd = number of repeats of each clone in cdr_Full_gd
df <- df %>%
group_by(cdr_Full_gd) %>%
mutate(clone_size_gd = ifelse(!is.na(cdr_Full_gd), n(), NA)) %>%
ungroup()
# 5. Reorder columns
df <- df %>%
select(
a_cdr3,
b_cdr3,
cdr_Full_ab,
clone_size_ab,
g_cdr3,
d_cdr3,
cdr_Full_gd,
clone_size_gd,
everything() # keep the rest of columns after these
)
# 6. Create a summary table
summary_table <- data.frame(
only_ab = sum(!is.na(df$cdr_Full_ab) & is.na(df$cdr_Full_gd)),
only_gd = sum(is.na(df$cdr_Full_ab) & !is.na(df$cdr_Full_gd)),
both    = sum(!is.na(df$cdr_Full_ab) & !is.na(df$cdr_Full_gd)),
neither = sum(is.na(df$cdr_Full_ab) & is.na(df$cdr_Full_gd))
)
# Example clone size vector
clone_sizes <- c(650, 30, 18, 4, 5, 6, 10)
names(clone_sizes) <- c("1", "2", "3", "4", "5", "6", "10")
# Calculate percentages
clone_percent <- round(100 * clone_sizes / sum(clone_sizes), 1)
# Set PNG output
png("clone_size_percentage.png", width = 800, height = 600, bg = "white")
# Create barplot
barplot(
clone_percent,
main = "αβ Clone Size Distribution",
col = "steelblue",
ylab = "Percentage (%)",
xlab = "Clone Size",
ylim = c(0, max(clone_percent) + 5),
cex.main = 1.5
)
# Add percentages on top of bars
text(
x = seq_along(clone_percent),
y = clone_percent,
pos = 3
)
dev.off()
df <- df %>%
group_by(g_cdr3) %>%
mutate(clone_size_g = ifelse(!is.na(g_cdr3), n(), NA)) %>%
ungroup() %>%
group_by(b_cdr3) %>%
mutate(clone_size_b = ifelse(!is.na(b_cdr3), n(), NA)) %>%
ungroup()
# 4. Compute clone size for g_cdr3 only and b_cdr3 only
df <- df %>%
group_by(g_cdr3) %>%
mutate(clone_size_g = ifelse(!is.na(g_cdr3), n(), NA)) %>%
ungroup() %>%
group_by(b_cdr3) %>%
mutate(clone_size_b = ifelse(!is.na(b_cdr3), n(), NA)) %>%
ungroup()
# 5. Reorder columns
df <- df %>%
select(
a_cdr3,
b_cdr3,
clone_size_b,
cdr_Full_ab,
clone_size_ab,
g_cdr3,
clone_size_g,
d_cdr3,
cdr_Full_gd,
clone_size_gd,
everything() # keep the rest of columns after these
)
View(df)
library(readxl)
library(dplyr)
library(writexl)
# 1. Read the Excel file
df <- read_excel("EATL_tcr_combine.xlsx")
# 2. Create cdr_Full_ab = a_cdr3 + b_cdr3
df <- df %>%
mutate(
cdr_Full_ab = ifelse(!is.na(a_cdr3) & !is.na(b_cdr3),
paste0(a_cdr3, "_", b_cdr3), NA)
)
# 3. Create cdr_Full_gd = g_cdr3 + d_cdr3
df <- df %>%
mutate(
cdr_Full_gd = ifelse(!is.na(g_cdr3) & !is.na(d_cdr3),
paste0(g_cdr3, "_", d_cdr3), NA)
)
# 4. Create clone_size_ab = number of repeats of each clone in cdr_Full_ab
df <- df %>%
group_by(cdr_Full_ab) %>%
mutate(clone_size_ab = ifelse(!is.na(cdr_Full_ab), n(), NA)) %>%
ungroup()
# 5. Create clone_size_gd = number of repeats of each clone in cdr_Full_gd
df <- df %>%
group_by(cdr_Full_gd) %>%
mutate(clone_size_gd = ifelse(!is.na(cdr_Full_gd), n(), NA)) %>%
ungroup()
# 4. Compute clone size for g_cdr3 only and b_cdr3 only
df <- df %>%
group_by(g_cdr3) %>%
mutate(clone_size_g = ifelse(!is.na(g_cdr3), n(), NA)) %>%
ungroup() %>%
group_by(b_cdr3) %>%
mutate(clone_size_b = ifelse(!is.na(b_cdr3), n(), NA)) %>%
ungroup()
# 5. Reorder columns
df <- df %>%
select(
a_cdr3,
b_cdr3,
clone_size_b,
cdr_Full_ab,
clone_size_ab,
g_cdr3,
clone_size_g,
d_cdr3,
cdr_Full_gd,
clone_size_gd,
everything() # keep the rest of columns after these
)
# 6. Create a summary table
summary_table <- data.frame(
only_ab = sum(!is.na(df$cdr_Full_ab) & is.na(df$cdr_Full_gd)),
only_gd = sum(is.na(df$cdr_Full_ab) & !is.na(df$cdr_Full_gd)),
both    = sum(!is.na(df$cdr_Full_ab) & !is.na(df$cdr_Full_gd)),
neither = sum(is.na(df$cdr_Full_ab) & is.na(df$cdr_Full_gd))
)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 1 (TRAV and TRBV in CD4 Clusters)/Fitzpatric")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(tidyr)
cluster_order <- c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs")
cluster_Diagnosis <- c("ACD")
filtered_metadata <- full_metadata %>%
filter(
!is.na(TRAV) & TRAV != "",
!is.na(TRBV) & TRBV != "",
cluster %in% cluster_order,
Diagnosis %in% cluster_Diagnosis,
)
filtered_metadata <- filtered_metadata %>% distinct(cdr_Full_ab, .keep_all = TRUE)
cluster_counts <- filtered_metadata %>%
group_by(cluster) %>%
summarise(count = n()) %>%
complete(cluster = cluster_order, fill = list(count = 0))
total_cells <- nrow(filtered_metadata)
cluster_counts <- cluster_counts %>%
add_row(cluster = "All", count = total_cells)
trav_cluster_counts <- filtered_metadata %>%
filter(TRAV != "") %>%
group_by(TRAV, cluster) %>%
summarise(count = n(), .groups = "drop") %>%
complete(TRAV, cluster = cluster_order, fill = list(count = 0))
trav_wide <- trav_cluster_counts %>% pivot_wider(names_from = cluster, values_from = count)
trav_wide <- trav_wide %>% mutate(All = rowSums(across(all_of(cluster_order))))
trav_wide <- trav_wide %>% select(TRAV, all_of(cluster_order), All)
trbv_cluster_counts <- filtered_metadata %>%
filter(TRBV != "") %>%
group_by(TRBV, cluster) %>%
summarise(count = n(), .groups = "drop") %>%
complete(TRBV, cluster = cluster_order, fill = list(count = 0))  # جایگزین 0 برای غایب‌ها
# تبدیل داده به حالت Wide (هر کلاستر ستون جدا)
trbv_wide <- trbv_cluster_counts %>%
pivot_wider(names_from = cluster, values_from = count)
# اضافه کردن ستون تعداد کل تکرار هر TRBV
trbv_wide <- trbv_wide %>%
mutate(All = rowSums(across(all_of(cluster_order))))
# مرتب کردن ستون‌ها
trbv_wide <- trbv_wide %>%
select(TRBV, all_of(cluster_order), All)
combo_cluster_counts <- filtered_metadata %>%
filter(TRAV != "", TRBV != "") %>%
group_by(TRAV, TRBV, cluster) %>%
summarise(count = n(), .groups = "drop") %>%
complete(TRAV, TRBV, cluster = cluster_order, fill = list(count = 0))
# تبدیل به wide format: هر کلاستر یک ستون
combo_wide <- combo_cluster_counts %>%
pivot_wider(names_from = cluster, values_from = count)
# اضافه کردن ستون تعداد کل تکرار هر ترکیب
combo_wide <- combo_wide %>%
mutate(All = rowSums(across(all_of(cluster_order))))
# مرتب‌سازی ستون‌ها
combo_wide <- combo_wide %>%
select(TRAV, TRBV, all_of(cluster_order), All)
# از combo_wide سطرهای ترکیبی که TRAV و TRBV مشخص شده
combo_selected <- combo_wide %>%
filter(
(TRAV == "TRAV26-1" & TRBV == "TRBV7-2") |
(TRAV == "TRAV4" & TRBV == "TRBV4") |
(TRAV == "TRAV4" & TRBV == "TRBV7-2")
)
new_row <- data.frame(
TRAV = "TRAV4",
TRBV = "TRBV4"
)
for (col in c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs", "All")) {
new_row[[col]] <- 0
}
combo_selected <- bind_rows(
combo_selected[1, ],
new_row,
combo_selected[-1, ]
)
# از trbv_wide سطرهای TRBV مشخص شده
trbv_selected <- trbv_wide %>%
filter(TRBV %in% c("TRBV20-1", "TRBV29-1", "TRBV9"))
library(tibble)  # برای استفاده از deframe()
# گرفتن تعداد کل هر کلاستر به صورت named vector
cluster_totals <- cluster_counts %>%
filter(cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs", "All")) %>%
select(cluster, count) %>%
deframe()
# تابع تبدیل مقادیر ماتریس به درصد
convert_to_percent <- function(df) {
df %>%
mutate(
`Th1 Mem` = (`Th1 Mem` / cluster_totals["Th1 Mem"]) * 100,
Th17 = (Th17 / cluster_totals["Th17"]) * 100,
`Th2/Tfh` = (`Th2/Tfh` / cluster_totals["Th2/Tfh"]) * 100,
Tregs = (Tregs / cluster_totals["Tregs"]) * 100,
All = (All / cluster_totals["All"]) * 100
)
}
# اعمال تابع به هر دو ماتریس
combo_selected_percent <- convert_to_percent(combo_selected)
trbv_selected_percent <- convert_to_percent(trbv_selected)
library(dplyr)
# اضافه کردن ستون Combination به combo_selected_percent (برای راحتی نامگذاری)
combo_selected_percent <- combo_selected_percent %>%
mutate(Combination = paste(TRAV, "+", TRBV)) %>%
select(Combination, everything(), -TRAV, -TRBV)
# اضافه کردن ستون Combination به trbv_selected_percent (برای راحتی نامگذاری)
trbv_selected_percent <- trbv_selected_percent %>%
mutate(Combination = TRBV) %>%
select(Combination, everything(), -TRBV)
# ترکیب دو جدول
result <- bind_rows(combo_selected_percent, trbv_selected_percent)
# مرتب کردن ستون‌ها به شکل دلخواه (Combination، 5 ستون درصدی)
result <- result %>%
select(Combination, `Th1 Mem`, Th17, `Th2/Tfh`, Tregs, All)
# نام ستون‌ها رو به فرمتی که برای رسم لازم داریم تغییر میدیم
colnames(result) <- c("Combination", "Th1_Mem_pct", "Th17_pct", "Th2_Tfh_pct", "Tregs_pct", "All_pct")
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
tcr_colors <- c(
"TRAV26-1 + TRBV7-2" = "#ae1e28",
"TRAV4 + TRBV4"      = "#f78454",
"TRAV4 + TRBV7-2"    = "#ffd8c5",
"TRBV20-1"           = "#cfe3f6",
"TRBV29-1"           = "#5eaada",
"TRBV9"              = "#1367b7"
)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
# فرض بر اینکه result از قبل موجوده
# و tcr_colors تعریف شده
# Long format
long_result <- result %>%
pivot_longer(
cols = ends_with("_pct"),
names_to = "Cluster",
values_to = "Percent"
) %>%
mutate(Cluster = str_remove(Cluster, "_pct"))
# رسم پلات
p <- ggplot(long_result, aes(x = Cluster, y = Percent, fill = Combination)) +
geom_bar(stat = "identity") +
labs(x = "", y = "Proportion of CD4+ T cells (%)", title = "Based TRAV/TRBV usage") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(hjust = 0.5) # center the title
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_manual(
values = tcr_colors,
na.value = "grey80"  # رنگ خاکستری برای ترکیب‌هایی که تو tcr_colors نیستند
)
ggsave("Cluster_Stacked_by_Combination.png", plot = p, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("Cluster_Stacked_by_Combination.pdf", plot = p, width = 10, height = 6, dpi = 300, bg = "white")
# فیلتر کردن فقط 3 کلاستر مد نظر
long_result_filtered <- long_result %>%
filter(Cluster %in% c("Tregs", "Th2_Tfh", "All"))
long_result_filtered <- long_result %>%
filter(Cluster %in% c("Tregs", "Th2_Tfh", "All")) %>%
mutate(Cluster = if_else(Cluster == "All", "All CD4", Cluster))
p <- ggplot(long_result_filtered, aes(x = Cluster, y = Percent, fill = Combination)) +
geom_bar(stat = "identity") +
labs(x = "", y = "Proportion of CD4+ T cells (%)", title = "Based TRAV/TRBV usage") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(hjust = 0.5)
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_manual(
values = tcr_colors,
na.value = "grey80"
)
ggsave("Cluster_Stacked_by_Combination_Selected.png", plot = p, width = 10, height = 6, dpi = 300, bg = "white")
ggsave("Cluster_Stacked_by_Combination_Selected.pdf", plot = p, width = 10, height = 6, dpi = 300, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/TCR genotype distribution (Part 10)/CD4/TRAV/1_Healthy and ACD")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
clean_data <- full_metadata[
!is.na(full_metadata$TRAV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("Healthy", "ACD"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRAV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
healthy_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "Healthy"])]
acd_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
mean_healthy <- rowMeans(count_matrix[, healthy_samples, drop = FALSE])
mean_acd <- rowMeans(count_matrix[, acd_samples, drop = FALSE])
log2fc <- log2( (mean_acd + 1) / (mean_healthy + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(healthy_samples, acd_samples), drop = FALSE], 1, function(x) {
healthy_values <- as.numeric(x[healthy_samples])
acd_values <- as.numeric(x[acd_samples])
if(length(healthy_values) < 2 || length(acd_values) < 2) {
return(NA)
}
# test <- t.test(healthy_values, acd_values)
test <- wilcox.test(healthy_values, acd_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top_names <- rownames(top_genes)
colors <- c("#E6194B", "blue", "green", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRAV gene use(ACD versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
pdf("volcano_plot.pdf", width = 6, height = 7)  # Width and height in inches
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRAV gene use(ACD versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
clean_data <- full_metadata[
!is.na(full_metadata$TRAV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("Healthy", "ACD"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRAV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
healthy_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "Healthy"])]
acd_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
mean_healthy <- rowMeans(count_matrix[, healthy_samples, drop = FALSE])
mean_acd <- rowMeans(count_matrix[, acd_samples, drop = FALSE])
log2fc <- log2( (mean_acd + 1) / (mean_healthy + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(healthy_samples, acd_samples), drop = FALSE], 1, function(x) {
healthy_values <- as.numeric(x[healthy_samples])
acd_values <- as.numeric(x[acd_samples])
if(length(healthy_values) < 2 || length(acd_values) < 2) {
return(NA)
}
test <- t.test(healthy_values, acd_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top_names <- rownames(top_genes)
colors <- c("#E6194B", "blue", "green", "purple", "orange")
png("volcano_plot.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRAV gene use(ACD versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
pdf("volcano_plot.pdf", width = 6, height = 7)  # Width and height in inches
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRAV gene use(ACD versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top_names)) {
gene <- top_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
