subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
library(ggplot2)
library(scales)
library(dplyr)
library(patchwork)
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
View(subset_cells)
table(subset_cells$g_cdr3)
# Step 2: Compute clone size for g_cdr3
clone_sizes <- subset_cells %>%
group_by(g_cdr3) %>%
summarise(clone_size = n()) %>%
ungroup()
View(clone_sizes)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
unique(subset_cells$clone_size_gd)
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
subset_index <- with(full_metadata,
imm_receptor_Esmaeil == "Aberrant g" &
!is.na(g_cdr3) & g_cdr3 != "" &
(is.na(d_cdr3) | d_cdr3 == "") &
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
# Step 2: Compute clone size for the subset
clone_sizes <- full_metadata[subset_index, ] %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
View(subset_cells)
length(unique(full_metadata$CellID))
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
View(subset_cells)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
View(subset_cells)
# Step 3: Update full_metadata with clone_size_gd from subset_cells
full_metadata <- full_metadata %>%
left_join(
subset_cells %>% select(CellID, clone_size_gd),
by = "CellID"
) %>%
mutate(
clone_size_gd = coalesce(clone_size_gd.y, clone_size_gd.x)
) %>%
select(-clone_size_gd.x, -clone_size_gd.y)
View(full_metadata)
# Step 3: Update clone_size_gd in full_metadata based on subset_cells
full_metadata$clone_size_gd[match(subset_cells$CellID, full_metadata$CellID)] <- subset_cells$clone_size_gd
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
View(subset_cells)
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
unique(subset_cells$clone_size_gd)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
unique(subset_cells$clone_size_gd)
full_metadata$clone_size_gd[match(subset_cells$CellID, full_metadata$CellID)] <- subset_cells$clone_size_gd
# Step 1: Select the subset of cells
subset_cells2 <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
View(subset_cells2)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/4_Clonal Analysis Including Diversity, Expansion, and Clone Size Distribution/Distribution of Clones by Size on UMAP/Clone size of gamma invariant cells is included/γδ")
#------------------------------------------------------------------------------- libraries
library(ggplot2)
library(scales)
library(dplyr)
library(patchwork)
# Step 1: Select the subset of cells
subset_cells2 <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
# Step 3: Update clone_size_gd in full_metadata based on subset_cells
full_metadata$clone_size_gd[match(subset_cells$CellID, full_metadata$CellID)] <- subset_cells$clone_size_gd
#------------------------------------------------------------------------------- Individual plots generation and saving
# Data preparation
plot_data <- full_metadata
plot_data$clone_size_gd <- as.numeric(as.character(plot_data$clone_size_gd))
# List of diagnoses (custom order for 2x2 layout)
order_diag <- c("Healthy", "ACD", "RCD-I", "RCD-II")
# List to store individual plots
p_list <- list()
# Loop through each diagnosis
for (diag in order_diag) {
# Subset cells for the current diagnosis
data_diag <- filter(plot_data, Diagnosis == diag)
# Select only colored cells for this diagnosis (sorted → largest on top)
data_colored <- data_diag %>%
filter(!is.na(clone_size_gd)) %>%
arrange(clone_size_gd)
p <- ggplot() +
# Layer 1: all cells as gray background
geom_point(
data = plot_data,
aes(x = scVI_with_hvg_UMAP_1, y = scVI_with_hvg_UMAP_2),
color = "grey90",
size = 0.5,
alpha = 0.5
) +
# Layer 2: colored cells for this diagnosis (sorted → largest on top)
geom_point(
data = data_colored,
aes(x = scVI_with_hvg_UMAP_1, y = scVI_with_hvg_UMAP_2, color = clone_size_gd),
size = 0.8,
alpha = 0.9
) +
scale_color_viridis_c(
name = "Clone size",
option = "viridis",
limits = c(1, 33),
oob = scales::squish,
labels = function(x) {
x <- prettyNum(x, digits = 2)
x[length(x)] <- paste0("≥ ", round(33, 0))
x
}
) +
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
legend.position = "right",
legend.title = element_text(vjust = 2),
legend.title.align = 0.5,
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank()
) +
labs(
x = "",
y = "",
title = diag
)
pdf_filename <- paste0("UMAP_highlight_", diag, ".pdf")
png_filename <- paste0("UMAP_highlight_", diag, ".png")
ggsave(pdf_filename, plot = p, width = 7, height = 6, bg = "white")
ggsave(png_filename, plot = p, width = 7, height = 6, dpi = 300, bg = "white")
# Store in list for combined plot
p_list[[diag]] <- p
}
#------------------------------------------------------------------------------- Combining plots and saving the final layout
# Combine the 4 plots into a 2x2 layout
final_plot <- (p_list[["Healthy"]] | p_list[["ACD"]]) /
(p_list[["RCD-I"]] | p_list[["RCD-II"]]) +
plot_layout(guides = "collect") &
theme(legend.position = "right",
legend.justification = "center")
ggsave("UMAP_4_diseases.png", plot = final_plot, width = 14, height = 12, dpi = 300, bg = "white")
ggsave("UMAP_4_diseases.pdf", plot = final_plot, width = 14, height = 12, bg = "white")
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
# Extract clone size values from metadata
clone_sizes <- full_metadata$clone_size_gd
# Remove missing (NA) values
clone_sizes <- clone_sizes[!is.na(clone_sizes)]
# Exclude singleton clones (clone size = 1)
clone_sizes <- clone_sizes[clone_sizes != 1]
# Sort clone sizes in ascending order
clone_sizes <- sort(clone_sizes)
# Calculate deciles (quantiles at every 5% interval)
deciles <- quantile(clone_sizes, probs = seq(0, 1, 0.05), na.rm = TRUE)
deciles
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
# Step 3: Update clone_size_gd in full_metadata based on subset_cells
full_metadata$clone_size_gd[match(subset_cells$CellID, full_metadata$CellID)] <- subset_cells$clone_size_gd
# Extract clone size values from metadata
clone_sizes <- full_metadata$clone_size_gd
# Remove missing (NA) values
clone_sizes <- clone_sizes[!is.na(clone_sizes)]
# Exclude singleton clones (clone size = 1)
clone_sizes <- clone_sizes[clone_sizes != 1]
# Sort clone sizes in ascending order
clone_sizes <- sort(clone_sizes)
# Calculate deciles (quantiles at every 5% interval)
deciles <- quantile(clone_sizes, probs = seq(0, 1, 0.05), na.rm = TRUE)
deciles
# clone size = 1 : Singletone
# clone size = 2-4: Q1
# clone size = 5-8: Q2
# clone size = 9-33: Q3
# clone size = 34-75: Q4
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/4_Clonal Analysis Including Diversity, Expansion, and Clone Size Distribution/Distribution of Clones by Size on UMAP/Clone size of gamma invariant cells is included/γδ")
#------------------------------------------------------------------------------- libraries
library(ggplot2)
library(scales)
library(dplyr)
library(patchwork)
# Step 1: Select the subset of cells
subset_cells <- full_metadata %>%
filter(
imm_receptor_Esmaeil == "Aberrant g",
!is.na(g_cdr3) & g_cdr3 != "",
(is.na(d_cdr3) | d_cdr3 == ""),
(is.na(cdr_Full_gd) | cdr_Full_gd == "")
)
# Step 2: Compute clone size within this subset
subset_cells <- subset_cells %>%
group_by(g_cdr3) %>%
mutate(clone_size_gd = n()) %>%
ungroup()
# Step 3: Update clone_size_gd in full_metadata based on subset_cells
full_metadata$clone_size_gd[match(subset_cells$CellID, full_metadata$CellID)] <- subset_cells$clone_size_gd
#------------------------------------------------------------------------------- Individual plots generation and saving
# Data preparation
plot_data <- full_metadata
plot_data$clone_size_gd <- as.numeric(as.character(plot_data$clone_size_gd))
# List of diagnoses (custom order for 2x2 layout)
order_diag <- c("Healthy", "ACD", "RCD-I", "RCD-II")
# List to store individual plots
p_list <- list()
# Loop through each diagnosis
for (diag in order_diag) {
# Subset cells for the current diagnosis
data_diag <- filter(plot_data, Diagnosis == diag)
# Select only colored cells for this diagnosis (sorted → largest on top)
data_colored <- data_diag %>%
filter(!is.na(clone_size_gd)) %>%
arrange(clone_size_gd)
p <- ggplot() +
# Layer 1: all cells as gray background
geom_point(
data = plot_data,
aes(x = scVI_with_hvg_UMAP_1, y = scVI_with_hvg_UMAP_2),
color = "grey90",
size = 0.5,
alpha = 0.5
) +
# Layer 2: colored cells for this diagnosis (sorted → largest on top)
geom_point(
data = data_colored,
aes(x = scVI_with_hvg_UMAP_1, y = scVI_with_hvg_UMAP_2, color = clone_size_gd),
size = 0.8,
alpha = 0.9
) +
scale_color_viridis_c(
name = "Clone size",
option = "viridis",
limits = c(1, 33),
oob = scales::squish,
labels = function(x) {
x <- prettyNum(x, digits = 2)
x[length(x)] <- paste0("≥ ", round(33, 0))
x
}
) +
theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
legend.position = "right",
legend.title = element_text(vjust = 2),
legend.title.align = 0.5,
plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank()
) +
labs(
x = "",
y = "",
title = diag
)
pdf_filename <- paste0("UMAP_highlight_", diag, ".pdf")
png_filename <- paste0("UMAP_highlight_", diag, ".png")
ggsave(pdf_filename, plot = p, width = 7, height = 6, bg = "white")
ggsave(png_filename, plot = p, width = 7, height = 6, dpi = 300, bg = "white")
# Store in list for combined plot
p_list[[diag]] <- p
}
#------------------------------------------------------------------------------- Combining plots and saving the final layout
# Combine the 4 plots into a 2x2 layout
final_plot <- (p_list[["Healthy"]] | p_list[["ACD"]]) /
(p_list[["RCD-I"]] | p_list[["RCD-II"]]) +
plot_layout(guides = "collect") &
theme(legend.position = "right",
legend.justification = "center")
ggsave("UMAP_4_diseases.png", plot = final_plot, width = 14, height = 12, dpi = 300, bg = "white")
ggsave("UMAP_4_diseases.pdf", plot = final_plot, width = 14, height = 12, bg = "white")
load("C:/Esmaeil/CeliacProject/Data/Meta Data/3_Final MetaData.Rdata")
unique(full_metadata$cluster)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Differential presence of CD4⁺ and IELs during celiac progression/CD4 Clusters")
library(tibble)
library(dplyr)
library(ggplot2)
library(ggalluvial)
library(tidyr)
library(scales)  # برای percent_format
target_clusters <- c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs", "CD4 FTH1+")
target_diagnosis <- c("Healthy", "ACD", "RCD-I", "RCD-II")
percent_matrix <- matrix(NA,
nrow = length(target_diagnosis),
ncol = length(target_clusters),
dimnames = list(target_diagnosis, target_clusters))
for (diag in target_diagnosis) {
subset_diag <- full_metadata[full_metadata$Diagnosis == diag, ]
for (clust in target_clusters) {
count_cluster <- sum(subset_diag$cluster == clust, na.rm = TRUE)
total_cells <- nrow(subset_diag)
percent <- (count_cluster / total_cells) * 100
percent_matrix[diag, clust] <- percent
}
}
percent_matrix <- t(percent_matrix)
df <- as.data.frame(percent_matrix)
df <- cbind(cluster = rownames(df), df)
rownames(df) <- NULL
wide_percent <- as_tibble(df)
# نامگذاری ستون‌ها
alluvial_data <- wide_percent %>%
rename(Healthy = Healthy, ACD = ACD, RCD_I = `RCD-I`, RCD_II = `RCD-II`) %>%
mutate(id = cluster)
# ساخت داده long برای 4 مرحله (با درصد)
long_data <- alluvial_data %>%
pivot_longer(cols = c("Healthy", "ACD", "RCD_I", "RCD_II"),
names_to = "Stage",
values_to = "Freq")
# ترتیب factor محور x
long_data$Stage <- factor(long_data$Stage, levels = c("Healthy", "ACD", "RCD_I", "RCD_II"))
# اضافه کردن شناسه alluvium
long_data <- long_data %>%
arrange(id, Stage) %>%
group_by(id) %>%
mutate(alluvium = cur_group_id()) %>%
ungroup()
cluster_colors <- c(
"Th1 Mem" = "#4A4E69",
"Th17"    = "#2a9d8f",
"Th2/Tfh" = "#e76f51",
"Tregs"   = "#8d99ae",
"CD4 FTH1+" = "#4A9d51"
)
# رسم نمودار
p <- ggplot(long_data,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(stat = "stratum", aes(label = paste0(round(Freq, 1), "%")),
size = 2.5, color = "black") +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = cluster_colors) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "CD4+ T Cell Clusters Distribution (Percentage)",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(p)
# ذخیره نمودار به PNG
ggsave("CD4_alluvial_percentages_Healthy_ACD_RCDI_RCDII.png", plot = p, width = 10, height = 5, dpi = 300, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Differential presence of CD4⁺ and IELs during celiac progression/CD4 Clusters")
library(tibble)
library(dplyr)
library(ggplot2)
library(ggalluvial)
library(tidyr)
library(scales)  # برای percent_format
target_clusters <- c("Th17", "Tfh", "CD4 Trm", "Tregs", "CD4 FTH1+")
target_diagnosis <- c("Healthy", "ACD", "RCD-I", "RCD-II")
percent_matrix <- matrix(NA,
nrow = length(target_diagnosis),
ncol = length(target_clusters),
dimnames = list(target_diagnosis, target_clusters))
for (diag in target_diagnosis) {
subset_diag <- full_metadata[full_metadata$Diagnosis == diag, ]
for (clust in target_clusters) {
count_cluster <- sum(subset_diag$cluster == clust, na.rm = TRUE)
total_cells <- nrow(subset_diag)
percent <- (count_cluster / total_cells) * 100
percent_matrix[diag, clust] <- percent
}
}
percent_matrix <- t(percent_matrix)
df <- as.data.frame(percent_matrix)
df <- cbind(cluster = rownames(df), df)
rownames(df) <- NULL
wide_percent <- as_tibble(df)
# نامگذاری ستون‌ها
alluvial_data <- wide_percent %>%
rename(Healthy = Healthy, ACD = ACD, RCD_I = `RCD-I`, RCD_II = `RCD-II`) %>%
mutate(id = cluster)
# ساخت داده long برای 4 مرحله (با درصد)
long_data <- alluvial_data %>%
pivot_longer(cols = c("Healthy", "ACD", "RCD_I", "RCD_II"),
names_to = "Stage",
values_to = "Freq")
# ترتیب factor محور x
long_data$Stage <- factor(long_data$Stage, levels = c("Healthy", "ACD", "RCD_I", "RCD_II"))
# اضافه کردن شناسه alluvium
long_data <- long_data %>%
arrange(id, Stage) %>%
group_by(id) %>%
mutate(alluvium = cur_group_id()) %>%
ungroup()
cluster_colors <- c(
"Th17" = "#4A4E69",
"Tfh"    = "#2a9d8f",
"CD4 Trm" = "#e76f51",
"Tregs"   = "#8d99ae",
"CD4 FTH1+" = "#4A9d51"
)
# رسم نمودار
p <- ggplot(long_data,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(stat = "stratum", aes(label = paste0(round(Freq, 1), "%")),
size = 2.5, color = "black") +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = cluster_colors) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "CD4+ T Cell Clusters Distribution (Percentage)",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(p)
# ذخیره نمودار به PNG
ggsave("CD4_alluvial_percentages_Healthy_ACD_RCDI_RCDII.png", plot = p, width = 10, height = 5, dpi = 300, bg = "white")
