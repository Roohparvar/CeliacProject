p <- ggplot(diagnosis_summaryTRGV, aes(x = Diagnosis, y = percent, fill = TRGV)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Diagnosis", y = "Percentage",
title = "Proportion of TRGV types per Diagnosis - Tgd CD8+") +
scale_fill_manual(values = dark_colors) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG and PDF
ggsave("TRGV_by_Diagnosis.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRGV_by_Diagnosis.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
# alluvial plot TRGV V1
alluvial_data_TRGV <- diagnosis_summaryTRGV %>%
mutate(Diagnosis = factor(Diagnosis),
TRGV = factor(TRGV,
levels = c("TRGV2", "TRGV3", "TRGV4",
"TRGV5", "TRGV8",
"TRGV9", "TRGV10", "TRGV11"))) %>%
rename(Stage = Diagnosis, id = TRGV, Freq = percent) %>%
mutate(alluvium = id) %>%  # Needed for geom_flow
complete(Stage, id, fill = list(Freq = 0)) %>%
mutate(alluvium = id)
# Replace any remaining NA with 0
alluvial_data_TRGV[is.na(alluvial_data_TRGV)] <- 0
# Colors (match order of legend)
dark_colors <- c(
"TRGV2"  = "#ae1f29",
"TRGV3"  = "#e05b48",
"TRGV4"  = "#f1a284",
"TRGV5"  = "#fbdbc3",
"TRGV8"  = "#cce5f6",
"TRGV9"  = "#8fc3dd",
"TRGV10" = "#4790be",
"TRGV11" = "#1666aa"
)
# Plot
p <- ggplot(alluvial_data_TRGV,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(
stat = "stratum",
aes(label = ifelse(Freq >= 2, paste0(round(Freq, 1), "%"), "")),
size = 2, color = "black"
) +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = dark_colors,
breaks = c("TRGV2", "TRGV3", "TRGV4",
"TRGV5", "TRGV8",
"TRGV9", "TRGV10", "TRGV11")) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "Proportion of TRGV Types per Diagnosis - Tgd CD8+",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG and PDF
ggsave("TRGV_alluvial_percentages_V1.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRGV_alluvial_percentages_V1.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
# alluvial plot TRGV V2
alluvial_data_TRGV <- alluvial_data_TRGV %>% filter(!id %in% c("TRGV11"))
# Plot
p <- ggplot(alluvial_data_TRGV,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(
stat = "stratum",
aes(label = ifelse(Freq >= 2, paste0(round(Freq, 1), "%"), "")),
size = 2, color = "black"
) +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = dark_colors,
breaks = c("TRGV2", "TRGV3", "TRGV4",
"TRGV5", "TRGV8",
"TRGV9", "TRGV10")) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "Proportion of TRGV Types per Diagnosis - Tgd CD8+",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG and PDF
ggsave("TRGV_alluvial_percentages_V2.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRGV_alluvial_percentages_V2.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
RCD22 = full_metadata[full_metadata$Patient == "RCD2-2",]
RCD21b = full_metadata[full_metadata$Patient == "RCD2-1b",]
table(RCD22$TRDV)
table(RCD21b$TRDV)
View(full_metadata)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TRDV and TRGV Pair/Just NK Tgd")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[full_metadata$cluster == "NK Tgd" , ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
RCD22 = full_metadata[full_metadata$Patient == "RCD2-2",]
RCD21b = full_metadata[full_metadata$Patient == "RCD2-1b",]
table(RCD22$TRDV)
table(RCD21b$TRDV)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TRDV and TRGV Pair/Just Tgd CD8+")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[full_metadata$cluster == "Tgd CD8+" , ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
RCD22 = full_metadata[full_metadata$Patient == "RCD2-2",]
RCD21b = full_metadata[full_metadata$Patient == "RCD2-1b",]
table(RCD22$TRDV)
table(RCD21b$TRDV)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TRDV and TRGV Pair/Just Tgd Cluster")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[full_metadata$cluster == "Tgd", ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
RCD22 = full_metadata[full_metadata$Patient == "RCD2-2",]
RCD21b = full_metadata[full_metadata$Patient == "RCD2-1b",]
table(RCD22$TRDV)
table(RCD21b$TRDV)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TRDV and TRGV Pair/Just Tgd INSIG1+")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[full_metadata$cluster == "Tgd INSIG1+" , ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
RCD22 = full_metadata[full_metadata$Patient == "RCD2-2",]
RCD21b = full_metadata[full_metadata$Patient == "RCD2-1b",]
table(RCD22$TRDV)
table(RCD21b$TRDV)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TRDV and TRGV Pair/Just Trm IEL")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[ full_metadata$cluster == "Trm IEL", ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
RCD22 = full_metadata[full_metadata$Patient == "RCD2-2",]
RCD21b = full_metadata[full_metadata$Patient == "RCD2-1b",]
table(RCD22$TRDV)
table(RCD21b$TRDV)
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[ full_metadata$cluster == "Trm IEL", ]
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[ full_metadata$cluster == "Trm IEL", ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
View(full_metadata)
View(full_metadata)
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
full_metadata = full_metadata[ full_metadata$cluster == "Trm IEL", ]
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
full_metadata = full_metadata[ full_metadata$cluster == "Trm IEL", ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
unique(full_metadata$imm_receptor_Esmaeil)
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g" , ]
View(full_metadata)
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g"
& !is.na(full_metadata$imm_receptor_Esmaeil), ]
View(full_metadata)
table(full_metadata$imm_receptor_Esmaeil)
table(full_metadata$cluster)
# your frequency table
cluster_counts <- table(full_metadata$cluster)
# bar plot with ggplot2
library(ggplot2)
# convert table to data frame
df <- as.data.frame(cluster_counts)
colnames(df) <- c("Cluster", "Count")
p <- ggplot(df, aes(x = reorder(Cluster, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal(base_size = 12) +
coord_flip() +
labs(title = "Cell Cluster Counts",
x = "Cluster",
y = "Count")
# save to PNG
ggsave("cluster_counts.png", plot = p, width = 8, height = 6, dpi = 300)
getwd()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/shared gd")
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g"
& !is.na(full_metadata$imm_receptor_Esmaeil), ]
# frequency table
cluster_counts <- table(full_metadata$cluster)
library(ggplot2)
# convert table to data frame
df <- as.data.frame(cluster_counts)
colnames(df) <- c("Cluster", "Count")
p <- ggplot(df, aes(x = reorder(Cluster, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # tilt x labels
labs(title = "Cell Cluster Counts",
x = "Cluster",
y = "Count")
# save as PNG
ggsave("cluster_counts.png", plot = p, width = 10, height = 6, dpi = 300)
# save as PNG
ggsave("cluster_counts.png", plot = p, width = 10, height = 6, dpi = 300, bg = "white")
library(scRepertoire)
# assuming you already combined data with combineTCR or combineBCR
# and stored clonotypes in `combined`
# make an UpSet plot
clonalOverlap(combined,
cloneCall = "gene+nt",   # or "aa" depending on your clonotype definition
method = "upset")
colnames(full_metadata)
# UpSet plot of shared clonotypes across samples/clusters
clonalOverlap(
cdr_Full_ab,
cloneCall = "gene+nt",   # or "aa" depending on your definition
method = "upset"
)
# UpSet plot of shared clonotypes across samples/clusters
clonalOverlap(
full_metadata$cdr_Full_ab,
cloneCall = "gene+nt",   # or "aa" depending on your definition
method = "upset"
)
# Load libraries
library(dplyr)
library(tidyr)
library(UpSetR)
install.packages("UpSetR")
library(dplyr)
library(tidyr)
library(UpSetR)
# Make sure the key columns exist
head(full_metadata[, c("cdr_Full_ab", "cluster")])
head(full_metadata[, c("cdr_Full_gd", "cluster")])
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
# Make sure the key columns exist
head(full_metadata[, c("cdr_Full_gd", "cluster")])
# Create a list of clones per cluster
clones_by_cluster <- full_metadata %>%
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd))) %>%
deframe()
library(dplyr)
library(tidyr)
library(UpSetR)
library(tibble)
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g"
& !is.na(full_metadata$imm_receptor_Esmaeil), ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
# Make sure the key columns exist
head(full_metadata[, c("cdr_Full_gd", "cluster")])
# Create a list of clones per cluster
clones_by_cluster <- full_metadata %>%
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd))) %>%
deframe()
View(clones_by_cluster)
# Convert to UpSet input
upset_data <- fromList(clones_by_cluster)
View(upset_data)
# Plot UpSet
upset(upset_data,
nsets = length(clones_by_cluster),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_ab)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_ab)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset.png", width = 2000, height = 1500, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_ab)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_ab)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset.png", width = 2000, height = 1500, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
library(dplyr)
library(tidyr)
library(UpSetR)
library(tibble)
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g"
& !is.na(full_metadata$imm_receptor_Esmaeil), ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_ab)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_ab)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset.png", width = 2000, height = 1500, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
library(dplyr)
library(tidyr)
library(UpSetR)
library(tibble)
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g"
& !is.na(full_metadata$imm_receptor_Esmaeil), ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRGV) & !is.na(full_metadata$TRGV) )
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_gd)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset.png", width = 2000, height = 1500, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
View(upset_data)
View(clones_by_cluster)
View(clones_list)
View(df)
View(p)
View(upset_data)
View(clones_list)
clones_list[["CD8 Cyt."]]
clones_list[["Trm IEL"]]
library(dplyr)
library(tidyr)
library(UpSetR)
library(purrr)
# Prepare clones per cluster (remove NAs)
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_ab)) %>%
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_ab)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Function to get shared clones for any combination of clusters
get_shared_clones <- function(clusters) {
Reduce(intersect, clones_list[clusters])
}
# Example: get shared clones between Th and Tregs
shared_Th_Tregs <- get_shared_clones(c("Th", "Tregs"))
print(shared_Th_Tregs)
# ---- Now build ALL intersections ----
cluster_names <- names(clones_list)
# Generate all combinations of clusters
all_combos <- unlist(lapply(1:length(cluster_names), function(i) {
combn(cluster_names, i, simplify = FALSE)
}), recursive = FALSE)
# Build a list of shared clonotypes for each bar
shared_clones_all <- map(all_combos, get_shared_clones)
# Combine into a tidy data frame
shared_table <- tibble(
clusters = map_chr(all_combos, ~ paste(.x, collapse = " & ")),
shared_clones = shared_clones_all,
n_shared = map_int(shared_clones_all, length)
)
# View table (which corresponds to the bars in the UpSet plot)
print(shared_table)
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRGV) & !is.na(full_metadata$TRGV) )
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_gd)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset.png", width = 2000, height = 1500, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
length(unique(full_metadata$cdr_Full_gd))
library(dplyr)
library(tidyr)
library(UpSetR)
library(tibble)
full_metadata = full_metadata[full_metadata$imm_receptor_Esmaeil == "Aberrant g"
& !is.na(full_metadata$imm_receptor_Esmaeil), ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRGV) & !is.na(full_metadata$TRGV) )
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_gd)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset1.png", width = 2000, height = 2000, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
library(dplyr)
library(tidyr)
library(UpSetR)
library(tibble)
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRGV) & !is.na(full_metadata$TRGV) )
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_gd)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset1.png", width = 2000, height = 2000, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
# Create a named list of clones per cluster
clones_by_cluster <- full_metadata %>%
filter(!is.na(cdr_Full_gd)) %>%      # remove NAs
group_by(cluster) %>%
summarise(clones = list(unique(cdr_Full_gd)))
clones_list <- setNames(clones_by_cluster$clones, clones_by_cluster$cluster)
# Convert to UpSet input
upset_data <- fromList(clones_list)
# Save as PNG
png("shared_clones_upset1.png", width = 2000, height = 2300, res = 300, bg = "white")
upset(upset_data,
nsets = length(clones_list),
nintersects = 20,
order.by = "freq",
mainbar.y.label = "Shared Clones",
sets.x.label = "Clones per Cluster")
dev.off()
3000%124
3000/124
