# Write to Excel
write_xlsx(
list(Patient_Shared_Clones_gd = shared_gd),
path = "Shared_γδ_Clones_Between_Patient.xlsx"
)
library(dplyr)
library(writexl)
# Function to calculate shared γδ clones between pairs of a grouping column
shared_clones_between_groups_gd <- function(df, group_col) {
groups <- df %>%
filter(!is.na(.data[[group_col]]), .data[[group_col]] != "") %>%
distinct(.data[[group_col]]) %>%
pull()
group_pairs <- combn(groups, 2, simplify = FALSE)
results <- lapply(group_pairs, function(pair) {
group1 <- pair[1]
group2 <- pair[2]
clones_group1 <- df %>%
filter(.data[[group_col]] == group1, !is.na(cdr_Full_gd), cdr_Full_gd != "") %>%
pull(cdr_Full_gd) %>% unique()
clones_group2 <- df %>%
filter(.data[[group_col]] == group2, !is.na(cdr_Full_gd), cdr_Full_gd != "") %>%
pull(cdr_Full_gd) %>% unique()
shared_clones <- intersect(clones_group1, clones_group2)
data.frame(
Group1 = group1,
Group2 = group2,
Shared_Clone_Count = length(shared_clones),
Shared_Clones = if(length(shared_clones) > 0) paste(shared_clones, collapse = ", ") else ""
)
})
bind_rows(results)
}
shared_gd <- shared_clones_between_groups_gd(full_metadata, "Patient")
write_xlsx(
list(Patient_Shared_Clones_gd = shared_gd),
path = "Shared_γδ_Clones_Between_Patient.xlsx"
)
shared_gd <- shared_clones_between_groups_gd(full_metadata, "cluster")
write_xlsx(
list(Patient_Shared_Clones_gd = shared_gd),
path = "Shared_γδ_Clones_Between_cluster.xlsx"
)
shared_gd <- shared_clones_between_groups_gd(full_metadata, "Diagnosis")
write_xlsx(
list(Patient_Shared_Clones_gd = shared_gd),
path = "Shared_γδ_Clones_Between_Diagnosis.xlsx"
)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/Alluvial Clone Analysis/Shared Clones Between Groups/αβ")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/Alluvial Clone Analysis/Shared Clones Between Groups/αβ")
library(dplyr)
library(writexl)
shared_clones_between_groups <- function(df, group_col) {
groups <- df %>%
filter(!is.na(.data[[group_col]]), .data[[group_col]] != "") %>%
distinct(.data[[group_col]]) %>%
pull()
group_pairs <- combn(groups, 2, simplify = FALSE)
results <- lapply(group_pairs, function(pair) {
group1 <- pair[1]
group2 <- pair[2]
clones_group1 <- df %>%
filter(.data[[group_col]] == group1, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
clones_group2 <- df %>%
filter(.data[[group_col]] == group2, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
shared_clones <- intersect(clones_group1, clones_group2)
data.frame(
Group1 = group1,
Group2 = group2,
Shared_Clone_Count = length(shared_clones),
Shared_Clones = if(length(shared_clones) > 0) paste(shared_clones, collapse = ", ") else ""
)
})
bind_rows(results)
}
shared_diagnosis <- shared_clones_between_groups(full_metadata, "Patient")
write_xlsx(
list(Diagnosis_Shared_Clones = shared_diagnosis),
path = "Shared_αβ_Clones_Between_Patient.xlsx"
)
shared_diagnosis <- shared_clones_between_groups(full_metadata, "cluster")
write_xlsx(
list(Diagnosis_Shared_Clones = shared_diagnosis),
path = "Shared_αβ_Clones_Between_cluster.xlsx"
)
shared_diagnosis <- shared_clones_between_groups(full_metadata, "Diagnosis")
write_xlsx(
list(Diagnosis_Shared_Clones = shared_diagnosis),
path = "Shared_αβ_Clones_Between_Diagnosis.xlsx"
)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/Alluvial Clone Analysis/αβ/RCD-I and Healthy")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Diagnosis"
group_values <- c("Healthy", "RCD-I")
selected_clones <- c(
"CLVFNTGGFKTIF+CASSTRSGGRTPGSCF",
"CLVFNTGGFKTIF+CASSLQNWGLKHF",
"CIVFKAAGNKLTF+CASRAFDSTNEKLFF",
"CAPRGTSGTYKYIF+CASSFGTGGHEQYF",
"CADLKAAGNKLTF+CASSFNSGGLDATNEKLFF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
x_label <- ifelse(group_column == "PatientName", "Individual Patient", group_column)
filename <- paste0("Alluvial_Selected ",
ifelse(group_column == "PatientName", "Individual Patient", group_column),
" ", paste(group_values, collapse = " and "), ".png")
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_ab", alluvium = "cdr_Full_ab",
y = "Clone_Size", fill = "cdr_Full_ab")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected αβ Clone Sizes in ", x_label, "s: ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Diagnosis"
group_values <- c("Healthy", "RCD-I")
selected_clones <- c(
"CLVFNTGGFKTIF+CASSTRSGGRTPGSCF",
"CLVFNTGGFKTIF+CASSLQNWGLKHF",
"CIVFKAAGNKLTF+CASRAFDSTNEKLFF",
"CAPRGTSGTYKYIF+CASSFGTGGHEQYF",
"CADLKAAGNKLTF+CASSFNSGGLDATNEKLFF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
x_label <- ifelse(group_column == "PatientName", "Individual Patient", group_column)
filename <- paste0("Alluvial_Selected ",
ifelse(group_column == "PatientName", "Individual Patient", group_column),
" ", paste(group_values, collapse = " and "), ".png")
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_ab", alluvium = "cdr_Full_ab",
y = "Clone_Size", fill = "cdr_Full_ab")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected αβ Clones in ", x_label, "s: ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Diagnosis"
group_values <- c("Healthy", "RCD-I")
selected_clones <- c(
"CLVFNTGGFKTIF+CASSTRSGGRTPGSCF",
"CLVFNTGGFKTIF+CASSLQNWGLKHF",
"CIVFKAAGNKLTF+CASRAFDSTNEKLFF",
"CAPRGTSGTYKYIF+CASSFGTGGHEQYF",
"CADLKAAGNKLTF+CASSFNSGGLDATNEKLFF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
x_label <- group_column
filename <- paste0("Alluvial_Selected ", group_column, " ", paste(group_values, collapse = " and "), ".png")
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_ab", alluvium = "cdr_Full_ab",
y = "Clone_Size", fill = "cdr_Full_ab")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected αβ Clones in ", x_label, "s: ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
load("C:/Esmaeil/CeliacProject/BackUp/MetaData/MetaData_Esmaeil.Rdata")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Diagnosis"
group_values <- c("Healthy", "RCD-I")
selected_clones <- c(
"CLVFNTGGFKTIF+CASSTRSGGRTPGSCF",
"CLVFNTGGFKTIF+CASSLQNWGLKHF",
"CIVFKAAGNKLTF+CASRAFDSTNEKLFF",
"CAPRGTSGTYKYIF+CASSFGTGGHEQYF",
"CADLKAAGNKLTF+CASSFNSGGLDATNEKLFF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
x_label <- group_column
filename <- paste0("Alluvial_Selected ", group_column, " ", paste(group_values, collapse = " and "), ".png")
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_ab", alluvium = "cdr_Full_ab",
y = "Clone_Size", fill = "cdr_Full_ab")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected αβ Clones in ", x_label, "s: ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Diagnosis"
group_values <- c("Healthy", "RCD-I")
selected_clones <- c(
"CLVFNTGGFKTIF+CASSTRSGGRTPGSCF",
"CLVFNTGGFKTIF+CASSLQNWGLKHF",
"CIVFKAAGNKLTF+CASRAFDSTNEKLFF",
"CAPRGTSGTYKYIF+CASSFGTGGHEQYF",
"CADLKAAGNKLTF+CASSFNSGGLDATNEKLFF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
x_label <- group_column
filename <- paste0("Alluvial_Selected ", group_column, " ", paste(group_values, collapse = " and "), ".png")
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_ab", alluvium = "cdr_Full_ab",
y = "Clone_Size", fill = "cdr_Full_ab")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected αβ Clones in ", x_label, paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Diagnosis"
group_values <- c("Healthy", "RCD-I")
selected_clones <- c(
"CLVFNTGGFKTIF+CASSTRSGGRTPGSCF",
"CLVFNTGGFKTIF+CASSLQNWGLKHF",
"CIVFKAAGNKLTF+CASRAFDSTNEKLFF",
"CAPRGTSGTYKYIF+CASSFGTGGHEQYF",
"CADLKAAGNKLTF+CASSFNSGGLDATNEKLFF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_ab", alluvium = "cdr_Full_ab",
y = "Clone_Size", fill = "cdr_Full_ab")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected αβ Clones in ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/Alluvial Clone Analysis/γδ/ACD-1 and RCD1-13")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Patient"
group_values <- c("ACD-1", "RCD1-13")
selected_clones <- c(
"CAAWDYKKLF+CALGELPPPLGDTFGRTPINSS",
"CATKGLGYKKLF+CAARFLYWGIRGPLKLIF",
"CATWDPRYIIIRNS+CALGNPNRNGGYVHRYKLIF",
"CATWDSRIPPYYKKLF+CALGERATYRAVWVF"
)
# input ----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_ab %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_ab) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_ab")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
full_metadata$Patient
unique(full_metadata$Patient)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Patient"
group_values <- c("ACD-1", "RCD1-13")
selected_clones <- c(
"CAAWDYKKLF+CALGELPPPLGDTFGRTPINSS",
"CATKGLGYKKLF+CAARFLYWGIRGPLKLIF",
"CATWDPRYIIIRNS+CALGNPNRNGGYVHRYKLIF",
"CATWDSRIPPYYKKLF+CALGERATYRAVWVF"
)
# input -----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_gd %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_gd) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_gd")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_gd", alluvium = "cdr_Full_gd",
y = "Clone_Size", fill = "cdr_Full_gd")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected γδ Clones in ", x_label, "s: ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggalluvial)
# input -----------------------------------------------------------------------
group_column <- "Patient"
group_values <- c("ACD-1", "RCD1-13")
selected_clones <- c(
"CAAWDYKKLF+CALGELPPPLGDTFGRTPINSS",
"CATKGLGYKKLF+CAARFLYWGIRGPLKLIF",
"CATWDPRYIIIRNS+CALGNPNRNGGYVHRYKLIF",
"CATWDSRIPPYYKKLF+CALGERATYRAVWVF"
)
# input -----------------------------------------------------------------------
df_selected <- full_metadata %>%
filter(
!!sym(group_column) %in% group_values,
cdr_Full_gd %in% selected_clones
) %>%
select(all_of(group_column), cdr_Full_gd) %>%
group_by_at(vars(all_of(group_column), "cdr_Full_gd")) %>%
summarise(Clone_Size = n(), .groups = "drop")
df_wide <- df_selected %>%
pivot_wider(names_from = all_of(group_column), values_from = Clone_Size, values_fill = 0)
df_long <- df_wide %>%
pivot_longer(cols = all_of(group_values), names_to = group_column, values_to = "Clone_Size") %>%
filter(Clone_Size > 0)
p_alluvial <- ggplot(df_long,
aes_string(x = group_column, stratum = "cdr_Full_gd", alluvium = "cdr_Full_gd",
y = "Clone_Size", fill = "cdr_Full_gd")) +
geom_flow(alpha = 0.6) +
geom_stratum(alpha = 0.8) +
theme_minimal() +
labs(
title = paste0("Alluvial Plot of Selected γδ Clones in ", paste(group_values, collapse = " and ")),
x = x_label,
y = "Clone Size",
fill = "Clone ID"
) +
theme(
legend.position = "right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
ggsave(filename, plot = p_alluvial, width = 12, height = 6, dpi = 600, bg = "white")
