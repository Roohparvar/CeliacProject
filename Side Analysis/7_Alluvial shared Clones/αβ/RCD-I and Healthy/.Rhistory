setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/6_Unique Clones Per Individual Patient/αβ")
library(dplyr)
library(ggplot2)
clone_per_patient <- full_metadata %>%
group_by(Patient) %>%
summarise(unique_clones = n_distinct(cdr_Full_ab)) %>%
ungroup() %>%
arrange(desc(unique_clones)) %>%
mutate(Patient = factor(Patient, levels = Patient))
load("C:/Esmaeil/CeliacProject/BackUp/MetaData/MetaData_Esmaeil.Rdata")
library(dplyr)
library(ggplot2)
clone_per_patient <- full_metadata %>%
group_by(Patient) %>%
summarise(unique_clones = n_distinct(cdr_Full_ab)) %>%
ungroup() %>%
arrange(desc(unique_clones)) %>%
mutate(Patient = factor(Patient, levels = Patient))
png("Unique αβ Clones Per Individual Patient.png", width = 2800, height = 2000, res = 300)
ggplot(clone_per_patient, aes(x = Patient, y = unique_clones)) +
geom_bar(stat = "identity", fill = "#984ea3") +
labs(
title = "Number of Unique αβ Clones per Patient",
x = "Patient",
y = "Unique Clones"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7)
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/6_Unique Clones Per Individual Patient/γδ")
library(dplyr)
library(ggplot2)
clone_per_patient <- full_metadata %>%
group_by(Patient) %>%
summarise(unique_clones = n_distinct(cdr_Full_ab)) %>%
ungroup() %>%
arrange(desc(unique_clones)) %>%
mutate(Patient = factor(Patient, levels = Patient))
png("Unique αβ Clones Per Individual Patient.png", width = 2800, height = 2000, res = 300)
ggplot(clone_per_patient, aes(x = Patient, y = unique_clones)) +
geom_bar(stat = "identity", fill = "#984ea3") +
labs(
title = "Number of Unique αβ Clones per Patient",
x = "Patient",
y = "Unique Clones"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7)
)
dev.off()
library(dplyr)
library(ggplot2)
# Count unique γδ clones per patient
clone_per_patient <- full_metadata %>%
group_by(Patient) %>%
summarise(unique_clones = n_distinct(cdr_Full_gd)) %>%
ungroup() %>%
arrange(desc(unique_clones)) %>%
mutate(Patient = factor(Patient, levels = Patient))
# Plot
png("Unique_γδ_Clones_Per_Individual_Patient.png", width = 2800, height = 2000, res = 300)
ggplot(clone_per_patient, aes(x = Patient, y = unique_clones)) +
geom_bar(stat = "identity", fill = "#984ea3") +
labs(
title = "Number of Unique γδ Clones per Patient",
x = "Patient",
y = "Unique Clones"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7)
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/5_Unique Clones Per Diagnosis/αβ")
library(dplyr)
library(ggplot2)
clone_per_id <- full_metadata %>%
filter(!is.na(Diagnosis) & Diagnosis != "") %>%
droplevels() %>%
group_by(Diagnosis) %>%
summarise(unique_clones = n_distinct(cdr_Full_ab)) %>%
ungroup() %>%
arrange(desc(unique_clones)) %>%
mutate(Diagnosis = factor(Diagnosis, levels = Diagnosis))
png("Unique αβ Clones Per Diagnosis.png", width = 2800, height = 2000, res = 300)
ggplot(clone_per_id, aes(x = Diagnosis, y = unique_clones)) +
geom_bar(stat = "identity", fill = "#984ea3") +
labs(
title = "Number of Unique αβ Clones per Diagnosis",
x = "Diagnosis",
y = "Unique Clones"
) +
theme_minimal(base_size = 16) +
theme(
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7)
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/Alluvial Clone Analysis/Shared Clones Between Groups")
library(dplyr)
library(writexl)
# Function to calculate shared clones between pairs of a grouping column
shared_clones_between_groups <- function(df, group_col) {
groups <- df %>%
filter(!is.na(.data[[group_col]]), .data[[group_col]] != "") %>%
distinct(.data[[group_col]]) %>%
pull()
group_pairs <- combn(groups, 2, simplify = FALSE)
results <- lapply(group_pairs, function(pair) {
group1 <- pair[1]
group2 <- pair[2]
clones_group1 <- df %>%
filter(.data[[group_col]] == group1, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
clones_group2 <- df %>%
filter(.data[[group_col]] == group2, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
shared_clones <- intersect(clones_group1, clones_group2)
data.frame(
Group1 = group1,
Group2 = group2,
Shared_Clone_Count = length(shared_clones),
Shared_Clones = if(length(shared_clones) > 0) paste(shared_clones, collapse = ", ") else ""
)
})
bind_rows(results)
}
shared_diagnosis <- shared_clones_between_groups(full_metadata, "Diagnosis")
# Write to Excel
write_xlsx(
list(Diagnosis_Shared_Clones = shared_diagnosis),
path = "Shared_Clones_Between_Diagnosis.xlsx"
)
library(dplyr)
library(writexl)
# Function to calculate shared clones between pairs of a grouping column
shared_clones_between_groups <- function(df, group_col) {
groups <- df %>%
filter(!is.na(.data[[group_col]]), .data[[group_col]] != "") %>%
distinct(.data[[group_col]]) %>%
pull()
group_pairs <- combn(groups, 2, simplify = FALSE)
results <- lapply(group_pairs, function(pair) {
group1 <- pair[1]
group2 <- pair[2]
clones_group1 <- df %>%
filter(.data[[group_col]] == group1, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
clones_group2 <- df %>%
filter(.data[[group_col]] == group2, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
shared_clones <- intersect(clones_group1, clones_group2)
data.frame(
Group1 = group1,
Group2 = group2,
Shared_Clone_Count = length(shared_clones),
Shared_Clones = if(length(shared_clones) > 0) paste(shared_clones, collapse = ", ") else ""
)
})
bind_rows(results)
}
shared_diagnosis <- shared_clones_between_groups(full_metadata, "cluster")
# Write to Excel
write_xlsx(
list(Diagnosis_Shared_Clones = shared_diagnosis),
path = "Shared_Clones_Between_clusters.xlsx"
)
full_metadata$Patient
library(dplyr)
library(writexl)
# Function to calculate shared clones between pairs of a grouping column
shared_clones_between_groups <- function(df, group_col) {
groups <- df %>%
filter(!is.na(.data[[group_col]]), .data[[group_col]] != "") %>%
distinct(.data[[group_col]]) %>%
pull()
group_pairs <- combn(groups, 2, simplify = FALSE)
results <- lapply(group_pairs, function(pair) {
group1 <- pair[1]
group2 <- pair[2]
clones_group1 <- df %>%
filter(.data[[group_col]] == group1, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
clones_group2 <- df %>%
filter(.data[[group_col]] == group2, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
shared_clones <- intersect(clones_group1, clones_group2)
data.frame(
Group1 = group1,
Group2 = group2,
Shared_Clone_Count = length(shared_clones),
Shared_Clones = if(length(shared_clones) > 0) paste(shared_clones, collapse = ", ") else ""
)
})
bind_rows(results)
}
shared_diagnosis <- shared_clones_between_groups(full_metadata, "Patientr")
library(dplyr)
library(writexl)
# Function to calculate shared clones between pairs of a grouping column
shared_clones_between_groups <- function(df, group_col) {
groups <- df %>%
filter(!is.na(.data[[group_col]]), .data[[group_col]] != "") %>%
distinct(.data[[group_col]]) %>%
pull()
group_pairs <- combn(groups, 2, simplify = FALSE)
results <- lapply(group_pairs, function(pair) {
group1 <- pair[1]
group2 <- pair[2]
clones_group1 <- df %>%
filter(.data[[group_col]] == group1, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
clones_group2 <- df %>%
filter(.data[[group_col]] == group2, !is.na(cdr_Full_ab), cdr_Full_ab != "") %>%
pull(cdr_Full_ab) %>% unique()
shared_clones <- intersect(clones_group1, clones_group2)
data.frame(
Group1 = group1,
Group2 = group2,
Shared_Clone_Count = length(shared_clones),
Shared_Clones = if(length(shared_clones) > 0) paste(shared_clones, collapse = ", ") else ""
)
})
bind_rows(results)
}
shared_diagnosis <- shared_clones_between_groups(full_metadata, "Patient")
# Write to Excel
write_xlsx(
list(Diagnosis_Shared_Clones = shared_diagnosis),
path = "Shared_Clones_Between_Patient.xlsx"
)
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clone Size Analysis/Alluvial Clone Analysis/RCD-I and Healthy")
View(full_metadata)
unique(full_metadata$Diagnosis)
