legend.title = element_text(size = 5),
legend.text = element_text(size = 4),
legend.key.size = unit(4, "mm")
)
p1 <- ggplot(df, aes(x = Patient, y = perc, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Percentage of Cells",
fill = "Clone Size",
title = "γδ Clonal Size Distribution by Patient (Percentage) | Tγδ Group"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("Tγδ Group (Percentage).pdf", p1, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("Tγδ Group (Percentage).png", p1, width = 4, height = 2, dpi = 600, bg = "white")
p2 <- ggplot(df, aes(x = Patient, y = n_cells, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Number of Cells",
fill = "Clone Size",
title = "γδ Clonal Size Distribution by Patient (Raw Counts) | Tγδ Group"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("Tγδ Group (Raw Counts).pdf", p2, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("Tγδ Group (Raw Counts).png", p2, width = 4, height = 2, dpi = 600, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/5_Clonal Expansion Analysis/Based on cdr_Full_ab/2_All Clusters/Horizontal/Version 4/Patient By Patient/HKL B cell")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
full_metadata = full_metadata[full_metadata$cluster == "Plasma cells_1" |
full_metadata$cluster == "B cells_1" |
full_metadata$cluster == "B cells_2" |
full_metadata$cluster == "B cells MZB1+" |
full_metadata$cluster == "Plasma cells_2" |
full_metadata$cluster == "Plasmablast" |
full_metadata$cluster == "B cells BAFFR" , ]
full_metadata <- full_metadata %>% filter(!(is.na(cdr_Full_ig_hk) & is.na(cdr_Full_ig_hL)))
full_metadata <- full_metadata %>%
mutate(
CloneSize_hk = ifelse(
is.na(cdr_Full_ig_hk),
NA,
ave(seq_along(cdr_Full_ig_hk), cdr_Full_ig_hk, FUN = length)
),
CloneSize_hL = ifelse(
is.na(cdr_Full_ig_hL),
NA,
ave(seq_along(cdr_Full_ig_hL), cdr_Full_ig_hL, FUN = length)
)
) %>%
relocate(CloneSize_hk, .after = cdr_Full_ig_hk) %>%
relocate(CloneSize_hL, .after = cdr_Full_ig_hL)
full_metadata_HL <- full_metadata %>% filter(!(is.na(full_metadata$CloneSize_hL)))
full_metadata_HK <- full_metadata %>% filter(!(is.na(full_metadata$CloneSize_hk)))
full_metadata = full_metadata_HL
# Filter by Patient if needed
metadata_filtered <- full_metadata %>%
filter(!is.na(CloneSize_hL)) %>%
mutate(clone_category = case_when(
CloneSize_hL == 1 ~ "Singleton",
CloneSize_hL >= 2 & CloneSize_hL <= 10 ~ "Size 2-10",
CloneSize_hL >= 11 & CloneSize_hL <= 50 ~ "Size 11-50",
CloneSize_hL >= 51 & CloneSize_hL <= 100 ~ "Size 51-100",
CloneSize_hL >= 101 ~ "Size 100+",
TRUE ~ NA_character_
)) %>%
filter(!is.na(clone_category))
# Summarize by Patient and clone category
df <- metadata_filtered %>%
group_by(Patient, clone_category) %>%
summarise(n_cells = n(), .groups = "drop") %>%
complete(Patient, clone_category = c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+"),
fill = list(n_cells = 0)) %>%
group_by(Patient) %>%
mutate(perc = if (sum(n_cells) == 0) 0 else n_cells / sum(n_cells) * 100) %>%
ungroup()
# Order clone categories
df$clone_category <- factor(df$clone_category, levels = rev(c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+")))
# Define the desired patient order
patient_order_Lymph <- c(
"H-3", "H-8", "H-9", "H-10", "H-11", "H-12",
"ACD-1", "ACD-2", "ACD-5", "ACD-6", "ACD-7", "ACD-8", "ACD-9",
"RCD1-1a", "RCD1-2", "RCD1-3", "RCD1-6a", "RCD1-11", "RCD1-12",
"RCD1-13", "RCD1-14", "RCD1-15", "RCD2-1b", "RCD2-2"
)
# Convert Patient to a factor with specified order
df$Patient <- factor(df$Patient, levels = patient_order_Lymph)
library(writexl)
write_xlsx(df, "df.xlsx")
# Colors and theme
clone_colors <- rev(c("#B3B3B3", "#F0CCFF", "#F8766D", "#619CFF", "#F032E6"))
white_theme <- theme_minimal(base_size = 12) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 2),
axis.text.y = element_text(size = 2),
plot.title = element_text(size = 4, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
legend.title = element_text(size = 5),
legend.text = element_text(size = 4),
legend.key.size = unit(4, "mm")
)
p1 <- ggplot(df, aes(x = Patient, y = perc, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Percentage of Cells",
fill = "Clone Size",
title = "hL Clonal Size Distribution by Patient (Percentage) | B and Plasma Cells Based on cdr_Full_ig_hL"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Percentage).pdf", p1, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Percentage).png", p1, width = 4, height = 2, dpi = 600, bg = "white")
p2 <- ggplot(df, aes(x = Patient, y = n_cells, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Number of Cells",
fill = "Clone Size",
title = "hL Clonal Size Distribution by Patient (Raw Counts) | B and Plasma Cells Based on cdr_Full_ig_hL"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Raw Counts).pdf", p2, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Raw Counts).png", p2, width = 4, height = 2, dpi = 600, bg = "white")
full_metadata = full_metadata_HK
# Filter by Patient if needed
metadata_filtered <- full_metadata %>%
filter(!is.na(CloneSize_hk)) %>%
mutate(clone_category = case_when(
CloneSize_hk == 1 ~ "Singleton",
CloneSize_hk >= 2 & CloneSize_hk <= 10 ~ "Size 2-10",
CloneSize_hk >= 11 & CloneSize_hk <= 50 ~ "Size 11-50",
CloneSize_hk >= 51 & CloneSize_hk <= 100 ~ "Size 51-100",
CloneSize_hk >= 101 ~ "Size 100+",
TRUE ~ NA_character_
)) %>%
filter(!is.na(clone_category))
# Summarize by Patient and clone category
df <- metadata_filtered %>%
group_by(Patient, clone_category) %>%
summarise(n_cells = n(), .groups = "drop") %>%
complete(Patient, clone_category = c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+"),
fill = list(n_cells = 0)) %>%
group_by(Patient) %>%
mutate(perc = if (sum(n_cells) == 0) 0 else n_cells / sum(n_cells) * 100) %>%
ungroup()
# Order clone categories
df$clone_category <- factor(df$clone_category, levels = rev(c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+")))
# Colors and theme
clone_colors <- rev(c("#B3B3B3", "#F0CCFF", "#F8766D", "#619CFF", "#F032E6"))
white_theme <- theme_minimal(base_size = 12) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 2),
axis.text.y = element_text(size = 2),
plot.title = element_text(size = 4, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
legend.title = element_text(size = 5),
legend.text = element_text(size = 4),
legend.key.size = unit(4, "mm")
)
p1 <- ggplot(df, aes(x = Patient, y = perc, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Percentage of Cells",
fill = "Clone Size",
title = "hk Clonal Size Distribution by Patient (Percentage) | B and Plasma Cells Based on cdr_Full_ig_hk"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Percentage).pdf", p1, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Percentage).png", p1, width = 4, height = 2, dpi = 600, bg = "white")
p2 <- ggplot(df, aes(x = Patient, y = n_cells, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Number of Cells",
fill = "Clone Size",
title = "hk Clonal Size Distribution by Patient (Raw Counts) | B and Plasma Cells Based on cdr_Full_ig_hk"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Raw Counts).pdf", p2, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Raw Counts).png", p2, width = 4, height = 2, dpi = 600, bg = "white")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
full_metadata = full_metadata[full_metadata$cluster == "Plasma cells_1" |
full_metadata$cluster == "B cells_1" |
full_metadata$cluster == "B cells_2" |
full_metadata$cluster == "B cells MZB1+" |
full_metadata$cluster == "Plasma cells_2" |
full_metadata$cluster == "Plasmablast" |
full_metadata$cluster == "B cells BAFFR" , ]
full_metadata <- full_metadata %>% filter(!(is.na(cdr_Full_ig_hk) & is.na(cdr_Full_ig_hL)))
full_metadata <- full_metadata %>%
mutate(
CloneSize_hk = ifelse(
is.na(cdr_Full_ig_hk),
NA,
ave(seq_along(cdr_Full_ig_hk), cdr_Full_ig_hk, FUN = length)
),
CloneSize_hL = ifelse(
is.na(cdr_Full_ig_hL),
NA,
ave(seq_along(cdr_Full_ig_hL), cdr_Full_ig_hL, FUN = length)
)
) %>%
relocate(CloneSize_hk, .after = cdr_Full_ig_hk) %>%
relocate(CloneSize_hL, .after = cdr_Full_ig_hL)
full_metadata_HL <- full_metadata %>% filter(!(is.na(full_metadata$CloneSize_hL)))
full_metadata_HK <- full_metadata %>% filter(!(is.na(full_metadata$CloneSize_hk)))
full_metadata = full_metadata_HL
# Filter by Patient if needed
metadata_filtered <- full_metadata %>%
filter(!is.na(CloneSize_hL)) %>%
mutate(clone_category = case_when(
CloneSize_hL == 1 ~ "Singleton",
CloneSize_hL >= 2 & CloneSize_hL <= 10 ~ "Size 2-10",
CloneSize_hL >= 11 & CloneSize_hL <= 50 ~ "Size 11-50",
CloneSize_hL >= 51 & CloneSize_hL <= 100 ~ "Size 51-100",
CloneSize_hL >= 101 ~ "Size 100+",
TRUE ~ NA_character_
)) %>%
filter(!is.na(clone_category))
# Summarize by Patient and clone category
df <- metadata_filtered %>%
group_by(Patient, clone_category) %>%
summarise(n_cells = n(), .groups = "drop") %>%
complete(Patient, clone_category = c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+"),
fill = list(n_cells = 0)) %>%
group_by(Patient) %>%
mutate(perc = if (sum(n_cells) == 0) 0 else n_cells / sum(n_cells) * 100) %>%
ungroup()
# Order clone categories
df$clone_category <- factor(df$clone_category, levels = rev(c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+")))
# Define the desired patient order
patient_order_Lymph <- c(
"H-3", "H-8", "H-9", "H-10", "H-11", "H-12",
"ACD-1", "ACD-2", "ACD-5", "ACD-6", "ACD-7", "ACD-8", "ACD-9",
"RCD1-1a", "RCD1-2", "RCD1-3", "RCD1-6a", "RCD1-11", "RCD1-12",
"RCD1-13", "RCD1-14", "RCD1-15", "RCD2-1b", "RCD2-2"
)
# Convert Patient to a factor with specified order
df$Patient <- factor(df$Patient, levels = patient_order_Lymph)
library(writexl)
write_xlsx(df, "df_HL.xlsx")
# Colors and theme
clone_colors <- rev(c("#B3B3B3", "#F0CCFF", "#F8766D", "#619CFF", "#F032E6"))
white_theme <- theme_minimal(base_size = 12) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 2),
axis.text.y = element_text(size = 2),
plot.title = element_text(size = 4, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
legend.title = element_text(size = 5),
legend.text = element_text(size = 4),
legend.key.size = unit(4, "mm")
)
p1 <- ggplot(df, aes(x = Patient, y = perc, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Percentage of Cells",
fill = "Clone Size",
title = "hL Clonal Size Distribution by Patient (Percentage) | B and Plasma Cells Based on cdr_Full_ig_hL"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Percentage).pdf", p1, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Percentage).png", p1, width = 4, height = 2, dpi = 600, bg = "white")
p2 <- ggplot(df, aes(x = Patient, y = n_cells, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Number of Cells",
fill = "Clone Size",
title = "hL Clonal Size Distribution by Patient (Raw Counts) | B and Plasma Cells Based on cdr_Full_ig_hL"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Raw Counts).pdf", p2, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hL (Raw Counts).png", p2, width = 4, height = 2, dpi = 600, bg = "white")
full_metadata = full_metadata_HK
# Filter by Patient if needed
metadata_filtered <- full_metadata %>%
filter(!is.na(CloneSize_hk)) %>%
mutate(clone_category = case_when(
CloneSize_hk == 1 ~ "Singleton",
CloneSize_hk >= 2 & CloneSize_hk <= 10 ~ "Size 2-10",
CloneSize_hk >= 11 & CloneSize_hk <= 50 ~ "Size 11-50",
CloneSize_hk >= 51 & CloneSize_hk <= 100 ~ "Size 51-100",
CloneSize_hk >= 101 ~ "Size 100+",
TRUE ~ NA_character_
)) %>%
filter(!is.na(clone_category))
# Summarize by Patient and clone category
df <- metadata_filtered %>%
group_by(Patient, clone_category) %>%
summarise(n_cells = n(), .groups = "drop") %>%
complete(Patient, clone_category = c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+"),
fill = list(n_cells = 0)) %>%
group_by(Patient) %>%
mutate(perc = if (sum(n_cells) == 0) 0 else n_cells / sum(n_cells) * 100) %>%
ungroup()
# Order clone categories
df$clone_category <- factor(df$clone_category, levels = rev(c("Singleton", "Size 2-10", "Size 11-50", "Size 51-100", "Size 100+")))
write_xlsx(df, "df_HK.xlsx")
# Colors and theme
clone_colors <- rev(c("#B3B3B3", "#F0CCFF", "#F8766D", "#619CFF", "#F032E6"))
white_theme <- theme_minimal(base_size = 12) +
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 2),
axis.text.y = element_text(size = 2),
plot.title = element_text(size = 4, face = "bold", hjust = 0.5),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
legend.title = element_text(size = 5),
legend.text = element_text(size = 4),
legend.key.size = unit(4, "mm")
)
p1 <- ggplot(df, aes(x = Patient, y = perc, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Percentage of Cells",
fill = "Clone Size",
title = "hk Clonal Size Distribution by Patient (Percentage) | B and Plasma Cells Based on cdr_Full_ig_hk"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Percentage).pdf", p1, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Percentage).png", p1, width = 4, height = 2, dpi = 600, bg = "white")
p2 <- ggplot(df, aes(x = Patient, y = n_cells, fill = clone_category)) +
geom_bar(stat = "identity", width = 0.9) +
scale_fill_manual(values = clone_colors) +
labs(
x = "Patient",
y = "Number of Cells",
fill = "Clone Size",
title = "hk Clonal Size Distribution by Patient (Raw Counts) | B and Plasma Cells Based on cdr_Full_ig_hk"
) +
white_theme +
scale_x_discrete(expand = c(0,10)) +
coord_cartesian(clip = "off")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Raw Counts).pdf", p2, width = 4, height = 2, dpi = 600, bg = "white", device = cairo_pdf, family = "Arial Unicode MS")
ggsave("B and Plasma Cells Based on cdr_Full_ig_hk (Raw Counts).png", p2, width = 4, height = 2, dpi = 600, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/Part 10/CD4/TRDV/3_ACD and RCD1")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
clean_data <- full_metadata[
!is.na(full_metadata$TRDV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRDV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top3_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top3_names <- rownames(top3_genes)
colors <- c("orange", "red", "blue", "green", "purple")
png("volcano_plot_pvalue_top5_legend_outside.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRDV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRDV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top3_names)) {
gene <- top3_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top3_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
clean_data <- full_metadata[
!is.na(full_metadata$TRDV) &
!is.na(full_metadata$Patient) &
full_metadata$cluster %in% c("Th1 Mem", "Th17", "Th2/Tfh", "Tregs") &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRDV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top3_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top3_names <- rownames(top3_genes)
colors <- c("orange", "red", "blue", "green", "purple")
png("volcano_plot_pvalue_top5_legend_outside.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRDV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "", line = 2, adj = 0.5)
for (i in seq_along(top3_names)) {
gene <- top3_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top3_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
