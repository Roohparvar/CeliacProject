) +
labs(
title = "Barcode Plot of Clones by Diagnosis",
x = "Clones (ordered)",
y = NULL
)
# Save to PNG
ggsave("barcode_plot_by_diagnosis.png", plot = barcode_plot, width = 10, height = 6, dpi = 300, bg="white")
library(ggplot2)
library(dplyr)
# Define the color palette
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Create barcode ID per diagnosis
full_metadata_barcode <- full_metadata %>%
group_by(Diagnosis) %>%
arrange(clone_size_bucket_ab) %>%
mutate(barcode_id = row_number())
# Create the plot
# Correct geom_segment call to draw vertical bars
barcode_plot <- ggplot(full_metadata_barcode, aes(x = barcode_id, color = clone_size_bucket_ab)) +
geom_segment(aes(x = barcode_id, xend = barcode_id, y = 0, yend = 1), size = 1) +
scale_color_manual(values = color_map, name = "Clone Size") +
facet_wrap(~ Diagnosis, scales = "free_x", ncol = 1) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
strip.text = element_text(size = 14, face = "bold")
) +
labs(
title = "Barcode Plot of Clones by Diagnosis",
x = "Clone Index",
y = NULL
)
# Save to PNG
ggsave("barcode_plot_by_diagnosis.png", plot = barcode_plot, width = 10, height = 6, dpi = 300, bg="white")
library(ggplot2)
library(dplyr)
# Color mapping
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Prepare barcode ID within each diagnosis
full_metadata_barcode <- full_metadata %>%
group_by(Diagnosis) %>%
arrange(clone_size_bucket_ab) %>%
mutate(clone_id = row_number())
# Plot: Diagnosis on X-axis
barcode_plot <- ggplot(full_metadata_barcode, aes(x = Diagnosis, color = clone_size_bucket_ab)) +
geom_segment(aes(x = as.numeric(factor(Diagnosis)) + (clone_id * 0.001),
xend = as.numeric(factor(Diagnosis)) + (clone_id * 0.001),
y = 0, yend = 1),
size = 0.6) +
scale_x_continuous(
breaks = 1:length(unique(full_metadata$Diagnosis)),
labels = unique(full_metadata$Diagnosis)
) +
scale_color_manual(values = color_map, name = "Clone Size") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.position = "right"
) +
labs(
title = "Barcode Plot of Clones by Diagnosis",
x = "Diagnosis"
)
# Save to PNG
ggsave("barcode_plot_by_diagnosis.png", plot = barcode_plot, width = 10, height = 4, dpi = 300)
library(ggplot2)
library(dplyr)
# Define color map
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Create clone ID within each Diagnosis
full_metadata_barcode <- full_metadata %>%
group_by(Diagnosis) %>%
mutate(clone_id = row_number()) %>%
ungroup()
# Plot
barcode_plot <- ggplot(full_metadata_barcode, aes(x = clone_id, y = Diagnosis, color = clone_size_bucket_ab)) +
geom_segment(aes(xend = clone_id, yend = Diagnosis), size = 1) +
scale_color_manual(values = color_map, name = "Clone Size") +
facet_wrap(~ Diagnosis, scales = "free_x", ncol = 1) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
strip.text = element_text(size = 14, face = "bold"),
legend.position = "right"
) +
labs(
title = "Barcode Plot of Clones by Diagnosis",
x = "Clones (ordered)",
y = NULL
)
# Save the plot
ggsave("barcode_plot_by_diagnosis.png", plot = barcode_plot, width = 10, height = 6, dpi = 300)
library(ggplot2)
library(dplyr)
# Define color map
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Create clone ID within each Diagnosis
full_metadata_barcode <- full_metadata %>%
group_by(Diagnosis) %>%
mutate(clone_id = row_number()) %>%
ungroup()
# Plot
barcode_plot <- ggplot(full_metadata_barcode, aes(x = clone_id, y = Diagnosis, color = clone_size_bucket_ab)) +
geom_segment(aes(xend = clone_id, yend = Diagnosis), size = 1) +
scale_color_manual(values = color_map, name = "Clone Size") +
facet_wrap(~ Diagnosis, scales = "free_x", ncol = 1) +
theme_minimal() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
strip.text = element_text(size = 14, face = "bold"),
legend.position = "right"
) +
labs(
title = "Barcode Plot of Clones by Diagnosis",
x = "Clones (ordered)",
y = NULL
)
# Save the plot
ggsave("barcode_plot_by_diagnosis.png", plot = barcode_plot, width = 10, height = 6, dpi = 300)
library(ggplot2)
library(dplyr)
# Color map
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Add a clone index within each diagnosis
full_metadata_barcode <- full_metadata %>%
group_by(Diagnosis) %>%
mutate(clone_index = row_number()) %>%
ungroup()
# Plot: barcode per diagnosis with vertical lines
barcode_plot <- ggplot(full_metadata_barcode, aes(x = clone_index, y = Diagnosis, color = clone_size_bucket_ab)) +
geom_segment(aes(x = clone_index, xend = clone_index, y = as.numeric(factor(Diagnosis)) - 0.4, yend = as.numeric(factor(Diagnosis)) + 0.4),
size = 0.6, show.legend = TRUE) +
scale_y_continuous(
breaks = 1:length(unique(full_metadata$Diagnosis)),
labels = unique(full_metadata$Diagnosis)
) +
scale_color_manual(values = color_map, name = "Clone Size") +
theme_minimal() +
theme(
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank(),
axis.text.y = element_text(size = 12),
legend.position = "right"
) +
labs(
title = "Clone Barcode per Diagnosis",
x = "Clone index"
)
# Save as PNG
ggsave("barcode_plot_by_diagnosis.png", plot = barcode_plot, width = 10, height = 5, dpi = 300)
library(dplyr)
library(tidyr)
# Create summary table
clone_summary <- full_metadata %>%
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop") %>%
pivot_wider(
names_from = clone_size_bucket_ab,
values_from = count,
values_fill = 0
)
# Print the summary table
print(clone_summary)
View(clone_summary)
library(ggplot2)
library(dplyr)
# Color map
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Prepare summary table (long format for ggplot)
clone_summary_long <- full_metadata %>%
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
# Plot
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size") +
theme_minimal() +
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
print(bar_plot)
# Optional: Save the plot
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300)
library(ggplot2)
library(dplyr)
# Color map (only 3 defined categories)
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Define the allowed categories
allowed_clone_sizes <- names(color_map)
# Prepare summary table (long format for ggplot)
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_ab %in% allowed_clone_sizes) %>%  # remove NA and unexpected categories
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
# Plot
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal() +
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
print(bar_plot)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300)
library(ggplot2)
library(dplyr)
# Color map (only 3 defined categories)
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Define the allowed categories
allowed_clone_sizes <- names(color_map)
# Prepare summary table (long format for ggplot)
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_ab %in% allowed_clone_sizes) %>%  # remove NA and unexpected categories
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
# Plot
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal() +
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
print(bar_plot)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300, bg="white")
library(ggplot2)
library(dplyr)
# Define the color map and desired order
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Desired order of the clone size categories
clone_order <- c("Singleton", "Small clone (2+)", "Large clone (10+)")
# Prepare summary table, filter, and set factor levels
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_ab %in% clone_order) %>%
mutate(clone_size_bucket_ab = factor(clone_size_bucket_ab, levels = clone_order)) %>%
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
# Plot
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal() +
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
print(bar_plot)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300)
library(ggplot2)
library(dplyr)
# Define the color map and desired order
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Desired order of the clone size categories
clone_order <- c("Singleton", "Small clone (2+)", "Large clone (10+)")
# Prepare summary table, filter, and set factor levels
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_ab %in% clone_order) %>%
mutate(clone_size_bucket_ab = factor(clone_size_bucket_ab, levels = clone_order)) %>%
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
# Plot
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal() +
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
print(bar_plot)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300, bg = "white")
library(ggplot2)
library(dplyr)
# Define the color map and desired order
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Desired order of the clone size categories
clone_order <- c("Large clone (10+)", "Small clone (2+)", "Singleton")
# Prepare summary table, filter, and set factor levels
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_ab %in% clone_order) %>%
mutate(clone_size_bucket_ab = factor(clone_size_bucket_ab, levels = clone_order)) %>%
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
# Plot
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal() +
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Display the plot
print(bar_plot)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300, bg = "white")
library(ggplot2)
library(dplyr)
# Define the color map and desired order
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Desired order of the clone size categories
clone_order <- c("Large clone (10+)", "Small clone (2+)", "Singleton")
# Prepare summary table, filter, and set factor levels
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_ab %in% clone_order) %>%
mutate(clone_size_bucket_ab = factor(clone_size_bucket_ab, levels = clone_order)) %>%
group_by(Diagnosis, clone_size_bucket_ab) %>%
summarise(count = n(), .groups = "drop")
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_ab)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal(base_size = 14) +   # base size bigger for clarity
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),   # center title
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.background = element_rect(fill = "white", color = NA),  # white panel bg
plot.background = element_rect(fill = "white", color = NA)    # white plot bg
)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300, bg = "white")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/Clone Size Analysis/Clone size in each Diagnosis/γδ")
library(ggplot2)
library(dplyr)
# Define the color map and desired order
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Desired order of the clone size categories
clone_order <- c("Large clone (10+)", "Small clone (2+)", "Singleton")
# Prepare summary table, filter, and set factor levels
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_gd %in% clone_order) %>%
mutate(clone_size_bucket_gd = factor(clone_size_bucket_gd, levels = clone_order)) %>%
group_by(Diagnosis, clone_size_bucket_gd) %>%
summarise(count = n(), .groups = "drop")
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_gd)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal(base_size = 14) +   # base size bigger for clarity
labs(
title = "Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),   # center title
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.background = element_rect(fill = "white", color = NA),  # white panel bg
plot.background = element_rect(fill = "white", color = NA)    # white plot bg
)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300, bg = "white")
library(ggplot2)
library(dplyr)
# Define the color map and desired order
color_map <- c(
"Singleton" = "#999999",
"Small clone (2+)" = "#FDBF6F",
"Large clone (10+)" = "#CAB2D6"
)
# Desired order of the clone size categories
clone_order <- c("Large clone (10+)", "Small clone (2+)", "Singleton")
# Prepare summary table, filter, and set factor levels
clone_summary_long <- full_metadata %>%
filter(clone_size_bucket_gd %in% clone_order) %>%
mutate(clone_size_bucket_gd = factor(clone_size_bucket_gd, levels = clone_order)) %>%
group_by(Diagnosis, clone_size_bucket_gd) %>%
summarise(count = n(), .groups = "drop")
bar_plot <- ggplot(clone_summary_long, aes(x = Diagnosis, y = count, fill = clone_size_bucket_gd)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = color_map, name = "Clone Size", drop = FALSE) +
theme_minimal(base_size = 14) +   # base size bigger for clarity
labs(
title = "TCRγδ Clone Size Distribution by Diagnosis",
x = "Diagnosis",
y = "Number of Clones"
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),   # center title
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.background = element_rect(fill = "white", color = NA),  # white panel bg
plot.background = element_rect(fill = "white", color = NA)    # white plot bg
)
# Save to PNG
ggsave("clone_distribution_barplot.png", plot = bar_plot, width = 8, height = 5, dpi = 300, bg = "white")
filtered_data <- full_metadata %>%
filter(Diagnosis == "Healthy", clone_size_bucket_gd == "Large clone (10+)")
View(filtered_data)
filtered_dataACD <- full_metadata %>%
filter(Diagnosis == "ACD", clone_size_bucket_gd == "Large clone (10+)")
View(filtered_dataACD)
