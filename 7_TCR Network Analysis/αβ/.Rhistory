thresholds <- 0:25
num_nonzero_nodes <- numeric(length(thresholds))
for (i in seq_along(thresholds)) {
th <- thresholds[i]
binary_matrix <- ifelse(dist_matrix < th, 1, 0)
diag(binary_matrix) <- 0
nonzero_nodes <- apply(binary_matrix, 1, function(x) any(x != 0))
num_nonzero_nodes[i] <- sum(nonzero_nodes)
}
load("C:/Esmaeil/CeliacProject/Data and large files/Meta Data/3_Final MetaData.Rdata")
dist_matrix <- readRDS("C:/Esmaeil/CeliacProject/Data and large files/Motif Network/threshold 5/1/dist_matrix.rds")
setwd("C:/Esmaeil/CeliacProject/CeliacProject/7_TCR Network Analysis/αβ")
# .............................................................................. Libraries
library(stringdist)
library(dplyr)
library(ggplot2)
library(igraph)
library(Biostrings)
library(tidyr)
# .............................................................................. Distance matrix
metadata <- full_metadata
# Cluster selection
# metadata <- metadata[metadata$cluster == "ILC2/ILTi",]
metadata <- metadata[!is.na(metadata$a_cdr3) & !is.na(metadata$b_cdr3), ]
# Keep only unique pairs of (a_cdr3, b_cdr3)
pairs <- unique(metadata[, c("a_cdr3", "b_cdr3")])
thresholds <- 0:25
num_nonzero_nodes <- numeric(length(thresholds))
for (i in seq_along(thresholds)) {
th <- thresholds[i]
binary_matrix <- ifelse(dist_matrix < th, 1, 0)
diag(binary_matrix) <- 0
nonzero_nodes <- apply(binary_matrix, 1, function(x) any(x != 0))
num_nonzero_nodes[i] <- sum(nonzero_nodes)
}
df <- data.frame(
Threshold = thresholds,
Nonzero_Nodes = num_nonzero_nodes
)
png("nonzero_nodes_vs_threshold.png", width = 2000, height = 1500, res = 600)
ggplot(df, aes(x = Threshold, y = Nonzero_Nodes)) +
geom_bar(stat = "identity", fill = "steelblue", width = 0.8) +
theme_minimal() +
labs(x = "Threshold", y = "Number of Nodes", title = "Nodes vs Distance Threshold") +
theme(
plot.title = element_text(hjust = 0.5, size = 9),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
axis.text.x = element_text(size = 7),
axis.text.y = element_text(size = 7)
)
dev.off()
binary_matrix <- readRDS("C:/Esmaeil/CeliacProject/Data and large files/Motif Network/threshold 5/2/binary_matrix.rds")
num_nodes <- nrow(binary_matrix)
num_edges <- sum(binary_matrix[upper.tri(binary_matrix)])
node_degrees <- rowSums(binary_matrix)
degree_matrix <- cbind(Node = 1:length(node_degrees), Degree = node_degrees)
degree_matrix <- degree_matrix[order(-degree_matrix[,2]), ]
degree_matrix <- as.data.frame(degree_matrix)
degree_matrix$Clone <- rownames(degree_matrix)
cluster_map <- full_metadata %>%
group_by(cdr_Full_ab) %>%
summarise(Cluster = paste(unique(cluster), collapse = ","), .groups = "drop")
degree_matrix <- degree_matrix %>% left_join(cluster_map, by = c("Clone" = "cdr_Full_ab"))
degree_counts <- degree_matrix %>% count(Degree, name = "Frequency")
degree_filtered <- subset(degree_counts, Degree < 100)
png("degree_distribution.png", width = 5000, height = 3000, res = 1200)
ggplot(degree_filtered, aes(x = Degree, y = Frequency)) +
geom_bar(stat = "identity", width = 0.8, fill = "steelblue") +
theme_minimal() +
labs(x = "Degree", y = "Frequency", title = "Degree Distribution") +
scale_x_continuous(breaks = seq(0, 200, by = 5)) +
theme(
plot.title = element_text(hjust = 0.5, size = 6),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4)
)
dev.off()
degree_counts <- degree_matrix %>% count(Degree, name = "Frequency")
degree_filtered <- subset(degree_counts, Degree < 100)
png("degree_distribution.png", width = 5000, height = 3000, res = 600)
ggplot(degree_filtered, aes(x = Degree, y = Frequency)) +
geom_bar(stat = "identity", width = 0.8, fill = "steelblue") +
theme_minimal() +
labs(x = "Degree", y = "Frequency", title = "Degree Distribution") +
scale_x_continuous(breaks = seq(0, 200, by = 5)) +
theme(
plot.title = element_text(hjust = 0.5, size = 6),
axis.title.x = element_text(size = 5),
axis.title.y = element_text(size = 5),
axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4)
)
dev.off()
degree_matrix <- degree_matrix[order(-degree_matrix$Degree), ]
top <- degree_matrix[1:100, ]
clusters <- unlist(strsplit(top$Cluster, split = ","))
cluster_counts <- table(trimws(clusters))
df <- as.data.frame(cluster_counts)
colnames(df) <- c("Cluster", "Count")
png("Clusters Associated with Network Hubs.png", width = 5000, height = 3000, res = 600)
ggplot(df, aes(x = Cluster, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Cluster Distribution of Top CDRs by Degree",
x = "Cluster",
y = "Count") +
theme(
plot.title = element_text(hjust = 0.5, size = 8),
axis.title.x = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.text.x = element_text(size = 5, angle = 45),
axis.text.y = element_text(size = 5)
)
dev.off()
# .............................................................................. Eigenvector Centrality
g <- graph_from_adjacency_matrix(binary_matrix, mode = "undirected", diag = FALSE)
eig_centrality <- eigen_centrality(g)$vector
Eigenvector <- data.frame(
Node = V(g)$name,
Eigenvector_Centrality = eig_centrality
)
cluster_map <- full_metadata %>%
group_by(cdr_Full_ab) %>%
summarise(Cluster = paste(unique(cluster), collapse = ","), .groups = "drop")
Eigenvector <- Eigenvector %>%
left_join(cluster_map, by = c("Node" = "cdr_Full_ab"))
Eigenvector <- Eigenvector %>%
arrange(desc(Eigenvector_Centrality))
topEigenvector <- ceiling(0.01 * nrow(Eigenvector))
topEigenvector_nodes <- Eigenvector[1:topEigenvector, ]
# imm_receptor + clone_size
topEigenvector_nodes <- topEigenvector_nodes %>%
left_join(full_metadata %>%
select(cdr_Full_ab, imm_receptor_Esmaeil, clone_size_ab),
by = c("Node" = "cdr_Full_ab")) %>%
group_by(Node, Eigenvector_Centrality, Cluster) %>%
summarise(
Imm_Receptor = paste(unique(imm_receptor_Esmaeil), collapse = ","),
Clone_Size   = paste(unique(clone_size_ab), collapse = ","),
.groups = "drop"
)
topEigenvector_nodes <- topEigenvector_nodes %>%
arrange(desc(Eigenvector_Centrality))
topEigenvector_nodes <- topEigenvector_nodes %>%
separate(Node, into = c("a_cdr3", "b_cdr3"), sep = "\\+", remove = FALSE)
# 4
saveRDS(topEigenvector_nodes, file = "topEigenvector_nodes.rds")
nodes <- topEigenvector_nodes$Node
top_nodes <- "topEigenvector_nodes.txt"
con <- file(top_nodes, "w")
for(i in seq_along(nodes)) {
#writeLines(paste0(">", i, ": ", nodes[i]), con)
writeLines(paste0(">", i, " "), con)
writeLines(nodes[i], con)
}
close(con)
# 1 bar plot
clusters <- unlist(strsplit(topEigenvector_nodes$Cluster, split = ","))
clusters <- trimws(clusters)
cluster_counts <- table(clusters)
df <- as.data.frame(cluster_counts)
colnames(df) <- c("Cluster", "Count")
png("Clusters_of_Top_Eigenvector_Hubs.png", width = 5000, height = 3000, res = 600)
ggplot(df, aes(x = Cluster, y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(title = "Cluster Distribution of Top 1% Nodes by Eigenvector Centrality",
x = "Cluster",
y = "Count") +
theme(
plot.title = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
axis.text.y = element_text(size = 8)
)
dev.off()
# 2 sub graph
top_node_names <- topEigenvector_nodes$Node
neighbors_list <- lapply(top_node_names, function(n) {
names(which(binary_matrix[n, ] == 1))
})
neighbors <- unique(unlist(neighbors_list))
sub_nodes <- unique(c(top_node_names, neighbors))
binary_matrix_sub <- binary_matrix[sub_nodes, sub_nodes]
keep <- rowSums(binary_matrix_sub) > 0
binary_matrix_sub <- binary_matrix_sub[keep, keep]
g_sub <- graph_from_adjacency_matrix(binary_matrix_sub, mode = "undirected", diag = FALSE)
V(g_sub)$color <- ifelse(V(g_sub)$name %in% top_node_names, "red", "skyblue")
V(g_sub)$size <- ifelse(V(g_sub)$name %in% top_node_names, 2, 1)
png("Top1_Nodes_with_Neighbors.png", width = 23000, height = 23000, res = 1300)
plot(g_sub,
#vertex.label = V(g_sub)$name,
vertex.label.cex = 0.5,
vertex.label = NA,
vertex.frame.color = "gray",
edge.color = "gray70",
layout = layout_with_fr)
dev.off()
# .............................................................................. Betweenness Centrality
# betweenness_centrality <- betweenness(g, directed = FALSE, normalized = TRUE)
#
# Betweenness <- data.frame(
#   Node = V(g)$name,
#   Betweenness_Centrality = betweenness_centrality
# )
#
# Betweenness <- Betweenness %>%
#   left_join(cluster_map, by = c("Node" = "cdr_Full_ab"))
#
# Betweenness <- Betweenness %>%
#   arrange(desc(Betweenness_Centrality))
#
# top <- ceiling(0.01 * nrow(Betweenness))
# top_nodes <- Betweenness[1:top, ]
#
# clusters <- unlist(strsplit(top_nodes$Cluster, split = ","))
# clusters <- trimws(clusters)
# cluster_counts <- table(clusters)
# df <- as.data.frame(cluster_counts)
# colnames(df) <- c("Cluster", "Count")
#
# png("Clusters_of_Top_Betweenness_Hubs.png", width = 5000, height = 3000, res = 600)
# ggplot(df, aes(x = Cluster, y = Count)) +
#   geom_bar(stat = "identity", fill = "darkorange") +
#   theme_minimal() +
#   labs(title = "Cluster Distribution of Top 1% Nodes by Betweenness Centrality",
#        x = "Cluster",
#        y = "Count") +
#   theme(
#     plot.title = element_text(hjust = 0.5, size = 12),
#     axis.title.x = element_text(size = 10),
#     axis.title.y = element_text(size = 10),
#     axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
#     axis.text.y = element_text(size = 8)
#   )
# dev.off()
# .............................................................................. Motif
# Install packages if not already installed
if (!requireNamespace("Biostrings", quietly = TRUE)) BiocManager::install("Biostrings")
if (!requireNamespace("msa", quietly = TRUE)) BiocManager::install("msa")
if (!requireNamespace("ggseqlogo", quietly = TRUE)) devtools::install_github("omarwagih/ggseqlogo")
library(Biostrings)
library(msa)
library(ggseqlogo)
# alpha unique
seqs <- topEigenvector_nodes$a_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Logo plots of the CDR3α") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3α.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
# beta
seqs <- topEigenvector_nodes$b_cdr3
seqs <- unique(seqs)
# Convert character vector to AAStringSet (required by msa)
seqs <- AAStringSet(seqs)
# Remove sequences with invalid characters
seqs <- seqs[!grepl("[^A-Z]", as.character(seqs))]
# Perform multiple sequence alignment
alignment <- msa(seqs, method = "ClustalW")  # or "Muscle", "ClustalOmega"
# Convert aligned sequences to character vector
aligned_seqs <- as.character(unmasked(alignment))
p <- ggseqlogo(aligned_seqs, method = "prob") +
ggtitle("Logo plots of the CDR3β") +
theme(
plot.title = element_text(hjust = 0.5, size = 16)  # center the title
)
# Save as high-quality PNG
ggsave("Logo plots of the CDR3β.png", plot = p,
width = 10, height = 6, dpi = 300, bg = "white")
