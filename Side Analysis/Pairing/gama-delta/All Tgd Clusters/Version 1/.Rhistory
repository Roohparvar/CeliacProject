title = "Top Genes"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/TCR genotype distribution (Part 10)/All Cells/TRBV/2_Healthy and RCD1")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$Diagnosis %in% c("Healthy", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
healthy_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "Healthy"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_healthy <- rowMeans(count_matrix[, healthy_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_RCD1 + 1) / (mean_healthy + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(healthy_samples, RCD1_samples), drop = FALSE], 1, function(x) {
healthy_values <- as.numeric(x[healthy_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(healthy_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(healthy_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top4_genes <- head(count_matrix[order(count_matrix$pvalue), ], 4)
top4_names <- rownames(top4_genes)
colors <- c("#000000", "#B22222", "#FFE119", "#00FF00", "orange")
png("volcano_plot_pvalue_top5_legend_outside.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(RCD1 versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRBV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top4_names)) {
gene <- top4_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top4_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
# Save as PNG
png("volcano_plot_top4_TRBV_RCD1_vs_Healthy.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(RCD1 versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRBV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top4_names)) {
gene <- top4_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top4_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
# Save as PDF
pdf("volcano_plot_top4_TRBV_RCD1_vs_Healthy.pdf", width = 6, height = 7)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(RCD1 versus Healthy)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRBV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top4_names)) {
gene <- top4_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top4_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Genes"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TCR genotype distribution/TCR genotype distribution (Part 10)/All Cells/TRBV/3_ACD and RCD1")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
clean_data <- full_metadata[
!is.na(full_metadata$TRBV) &
!is.na(full_metadata$Patient) &
full_metadata$Diagnosis %in% c("ACD", "RCD-I"),
]
count_matrix <- as.data.frame.matrix(table(clean_data$TRBV, clean_data$Patient))
percent_matrix <- sweep(count_matrix, 2, colSums(count_matrix), FUN = "/") * 100
count_matrix = percent_matrix
ACD_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "ACD"])]
RCD1_samples <- colnames(count_matrix)[colnames(count_matrix) %in% unique(clean_data$Patient[clean_data$Diagnosis == "RCD-I"])]
mean_ACD <- rowMeans(count_matrix[, ACD_samples, drop = FALSE])
mean_RCD1 <- rowMeans(count_matrix[, RCD1_samples, drop = FALSE])
log2fc <- log2( (mean_ACD + 1) / (mean_RCD1 + 1) )
count_matrix$log2FC <- log2fc
pvals <- apply(count_matrix[, c(ACD_samples, RCD1_samples), drop = FALSE], 1, function(x) {
ACD_values <- as.numeric(x[ACD_samples])
RCD1_values <- as.numeric(x[RCD1_samples])
if(length(ACD_values) < 2 || length(RCD1_values) < 2) {
return(NA)
}
test <- t.test(ACD_values, RCD1_values)
return(test$p.value)
})
count_matrix$pvalue <- pvals
count_matrix <- count_matrix[!is.na(count_matrix$pvalue), ]
count_matrix$FDR <- p.adjust(count_matrix$pvalue, method = "BH")
count_matrix$negLog10P <- -log10(count_matrix$pvalue)
top1_genes <- head(count_matrix[order(count_matrix$pvalue), ], 1)
top1_names <- rownames(top1_genes)
colors <- c("#FABEBE", "blue", "green", "purple", "orange")
png("volcano_plot_pvalue_top5_legend_outside.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRBV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top1_names)) {
gene <- top1_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top1_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
# Save as PNG
png("volcano_plot_top1_TRBV_ACD_vs_RCD1.png", width = 1300, height = 1600, res = 300)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRBV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top1_names)) {
gene <- top1_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top1_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
# Save as PDF
pdf("volcano_plot_top1_TRBV_ACD_vs_RCD1.pdf", width = 6, height = 7)
plot(
count_matrix$log2FC,
count_matrix$negLog10P,
xlab = "% difference TRBV gene use(ACD versus RCD1)",
ylab = "-log10(p-value)",
pch = 20,
col = "black",
xlim = range(count_matrix$log2FC) + c(0, 4)
)
abline(h = 1.3, lty = 2, col = "gray40")
abline(v = 0, lty = 2, col = "gray40")
title(main = "Volcano plot of TRBV segment usage", line = 2, adj = 0.5)
for (i in seq_along(top1_names)) {
gene <- top1_names[i]
points(
count_matrix[gene, "log2FC"],
count_matrix[gene, "negLog10P"],
pch = 20,
col = colors[i],
cex = 1.5
)
}
par(xpd = TRUE)
legend(
x = max(count_matrix$log2FC) + 1.5, y = max(count_matrix$negLog10P),
legend = top1_names,
col = colors,
pch = 20,
cex = 1,
title = "Top Gene"
)
dev.off()
setwd("C:/Esmaeil/CeliacProject/CeliacProject/TRDV and TRGV Pair/All Tgd Clusters")
load("C:/Esmaeil/CeliacProject/BackUp/Meta Data/MetaData_Esmaeil.Rdata")
library(dplyr)
library(circlize)
library(ggplot2)
library(ggalluvial)
library(scales)
library(tidyr)
library(writexl)
full_metadata = full_metadata[full_metadata$cluster == "Tgd" |
full_metadata$cluster == "Tgd CD8+" |
full_metadata$cluster == "NK Tgd" |
full_metadata$cluster == "Tgd INSIG1+" |
full_metadata$cluster == "Trm IEL", ]
full_metadata <- full_metadata %>% filter( !is.na(full_metadata$TRDV) & !is.na(full_metadata$TRGV) )
result <- full_metadata %>%
group_by(Diagnosis, TRDV) %>%
summarise(TRGVs = paste(unique(TRGV), collapse = ","), .groups = "drop") %>%
arrange(Diagnosis, TRDV)
all_sectors <- unique(c(full_metadata$TRDV, full_metadata$TRGV))
all_sectors <- na.omit(all_sectors)
# Example: define your own colors
custom_colors <- c(
"TRDV1"  = "#c6ab52",   # dark navy
"TRDV2"  = "#679966",   # dark grey-purple
"TRDV3"  = "#ff6766",    # very dark blue
"TRGV2"  = "#ae1f29",
"TRGV3"  = "#e05b48",
"TRGV4"  = "#f1a284",
"TRGV5"  = "#fbdbc3",
"TRGV5P" = "#f7f7f7",
"TRGV8"  = "#cce5f6",
"TRGV9"  = "#8fc3dd",
"TRGV10" = "#4790be",
"TRGV11" = "#1666aa"
)
# Assign any sectors not listed above to grey
grid.col <- setNames(rep("grey", length(all_sectors)), all_sectors)
grid.col[names(custom_colors)] <- custom_colors
TRDV_order <- sort(unique(na.omit(full_metadata$TRDV)))
other_sectors <- setdiff(unique(c(full_metadata$TRDV, full_metadata$TRGV)), TRDV_order)
sector_order <- c(TRDV_order, other_sectors)
# chordDiagram
Diagnosiss <- unique(full_metadata$Diagnosis)
for (p in Diagnosiss) {
df <- subset(full_metadata, Diagnosis == p, select = c("TRDV", "TRGV"))
df <- na.omit(df)
if (nrow(df) > 0) {
## --- PDF output ---
pdf(file = paste0("Circos_", p, ".pdf"), width = 9, height = 9)
circos.par(canvas.ylim = c(-0.95, 1))   # shift circle down
chordDiagram(df,
order = sector_order,
transparency = 0.5,
annotationTrack = "grid",
preAllocateTracks = list(track.height = 0.1), grid.col = grid.col,)
title(main = paste("TRGV-TRDV pairing - All Tgd Clusters -", p), line = 0.3, cex.main = 0.9)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter, CELL_META$ylim[1], sector.name,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
})
dev.off()
circos.clear()
## --- PNG output ---
png(file = paste0("Circos_", p, ".png"), width = 2300, height = 2200, res = 300)
circos.par(canvas.ylim = c(-0.95, 1))   # shift circle down
chordDiagram(df,
order = sector_order,
transparency = 0.5,
annotationTrack = "grid",
preAllocateTracks = list(track.height = 0.1), grid.col = grid.col)
title(main = paste("TRGV-TRDV pairing - All Tgd Clusters -", p), line = 0.3, cex.main = 0.9)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
sector.name = get.cell.meta.data("sector.index")
circos.text(CELL_META$xcenter, CELL_META$ylim[1], sector.name,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
})
dev.off()
circos.clear()
}
}
# Bar PlotTRDV
diagnosis_summary <- full_metadata %>%
group_by(Diagnosis, TRDV) %>%
summarise(count = n(), .groups = "drop_last") %>%
mutate(total = sum(count),
percent = round(100 * count / total, 2)) %>%
ungroup() %>%
arrange(Diagnosis, TRDV)
write_xlsx(diagnosis_summary, path = "diagnosis_summary_TRDV.xlsx")
p <- ggplot(diagnosis_summary, aes(x = Diagnosis, y = percent, fill = TRDV)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Diagnosis", y = "Percentage",
title = "Proportion of TRDV types per Diagnosis - All Tgd Clusters") +
scale_fill_manual(values = c(
"TRDV1" = "#c6ab52",   # dark navy
"TRDV2" = "#679966",   # dark grey-purple
"TRDV3" = "#ff6766"    # very dark blue
)) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
ggsave("TRDV_by_Diagnosis.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRDV_by_Diagnosis.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
# alluvial plot TRDV
alluvial_data <- diagnosis_summary %>%
mutate(Diagnosis = factor(Diagnosis),
TRDV = factor(TRDV)) %>%
rename(Stage = Diagnosis, id = TRDV, Freq = percent) %>%
mutate(alluvium = id)  # Needed for geom_flow
trdv_colors <- c(
"TRDV1" = "#c6ab52",
"TRDV2" = "#679966",
"TRDV3" = "#ff6766"
)
p <- ggplot(alluvial_data,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(stat = "stratum", aes(label = paste0(round(Freq, 1), "%")),
size = 3, color = "black") +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = trdv_colors) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "Proportion of TRDV Types per Diagnosis - All Tgd Clusters",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG
ggsave("TRDV_alluvial_percentages.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRDV_alluvial_percentages.pdf", plot = p, width = 10, height = 5, dpi = 300, bg = "white")
# Bar plot TRGV
diagnosis_summaryTRGV <- full_metadata %>%
group_by(Diagnosis, TRGV) %>%
summarise(count = n(), .groups = "drop_last") %>%
mutate(total = sum(count),
percent = round(100 * count / total, 2)) %>%
ungroup() %>%
arrange(Diagnosis, TRGV)
write_xlsx(diagnosis_summaryTRGV, path = "diagnosis_summary_TRGV.xlsx")
diagnosis_summaryTRGV$TRGV <- factor(diagnosis_summaryTRGV$TRGV,
levels = c("TRGV2", "TRGV3", "TRGV4", "TRGV5",
"TRGV5P", "TRGV8", "TRGV9", "TRGV10", "TRGV11"))
dark_colors <- c(
"TRGV2"  = "#ae1f29",
"TRGV3"  = "#e05b48",
"TRGV4"  = "#f1a284",
"TRGV5"  = "#fbdbc3",
"TRGV5P" = "#f7f7f7",
"TRGV8"  = "#cce5f6",
"TRGV9"  = "#8fc3dd",
"TRGV10" = "#4790be",
"TRGV11" = "#1666aa"
)
# Plot
p <- ggplot(diagnosis_summaryTRGV, aes(x = Diagnosis, y = percent, fill = TRGV)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Diagnosis", y = "Percentage",
title = "Proportion of TRGV types per Diagnosis - All Tgd Clusters") +
scale_fill_manual(values = dark_colors) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG and PDF
ggsave("TRGV_by_Diagnosis.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRGV_by_Diagnosis.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
# alluvial plot TRGV V1
alluvial_data_TRGV <- diagnosis_summaryTRGV %>%
mutate(Diagnosis = factor(Diagnosis),
TRGV = factor(TRGV,
levels = c("TRGV2", "TRGV3", "TRGV4",
"TRGV5", "TRGV5P", "TRGV8",
"TRGV9", "TRGV10", "TRGV11"))) %>%
rename(Stage = Diagnosis, id = TRGV, Freq = percent) %>%
mutate(alluvium = id) %>%  # Needed for geom_flow
complete(Stage, id, fill = list(Freq = 0)) %>%
mutate(alluvium = id)
# Replace any remaining NA with 0
alluvial_data_TRGV[is.na(alluvial_data_TRGV)] <- 0
# Colors (match order of legend)
dark_colors <- c(
"TRGV2"  = "#ae1f29",
"TRGV3"  = "#e05b48",
"TRGV4"  = "#f1a284",
"TRGV5"  = "#fbdbc3",
"TRGV5P" = "#f7f7f7",
"TRGV8"  = "#cce5f6",
"TRGV9"  = "#8fc3dd",
"TRGV10" = "#4790be",
"TRGV11" = "#1666aa"
)
# Plot
p <- ggplot(alluvial_data_TRGV,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(
stat = "stratum",
aes(label = ifelse(Freq >= 2, paste0(round(Freq, 1), "%"), "")),
size = 2, color = "black"
) +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = dark_colors,
breaks = c("TRGV2", "TRGV3", "TRGV4",
"TRGV5", "TRGV5P", "TRGV8",
"TRGV9", "TRGV10", "TRGV11")) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "Proportion of TRGV Types per Diagnosis - All Tgd Clusters",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG and PDF
ggsave("TRGV_alluvial_percentages_V1.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRGV_alluvial_percentages_V1.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
# alluvial plot TRGV V2
alluvial_data_TRGV <- alluvial_data_TRGV %>% filter(!id %in% c("TRGV11", "TRGV5P"))
# Plot
p <- ggplot(alluvial_data_TRGV,
aes(x = Stage, stratum = id, alluvium = alluvium,
y = Freq, fill = id)) +
geom_flow(alpha = 0.7, color = "grey50") +
geom_stratum(width = 0.3, color = "black") +
geom_text(
stat = "stratum",
aes(label = ifelse(Freq >= 2, paste0(round(Freq, 1), "%"), "")),
size = 2, color = "black"
) +
scale_x_discrete(expand = c(0.1, 0.1)) +
scale_fill_manual(values = dark_colors,
breaks = c("TRGV2", "TRGV3", "TRGV4",
"TRGV5", "TRGV8",
"TRGV9", "TRGV10")) +
scale_y_continuous(labels = percent_format(scale = 1)) +
labs(title = "Proportion of TRGV Types per Diagnosis - All Tgd Clusters",
x = "Diagnosis",
y = "Percentage (%)") +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))
# Save as PNG and PDF
ggsave("TRGV_alluvial_percentages_V2.png", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
ggsave("TRGV_alluvial_percentages_V2.pdf", plot = p, width = 10, height = 5, dpi = 600, bg = "white")
